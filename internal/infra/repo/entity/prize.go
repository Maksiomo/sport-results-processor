// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Prize is an object representing the database table.
type Prize struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompetitionID int64       `boil:"competition_id" json:"competition_id" toml:"competition_id" yaml:"competition_id"`
	PlaceBracket  string      `boil:"place_bracket" json:"place_bracket" toml:"place_bracket" yaml:"place_bracket"`
	CurrencyCode  string      `boil:"currency_code" json:"currency_code" toml:"currency_code" yaml:"currency_code"`
	PrizeAmount   int64       `boil:"prize_amount" json:"prize_amount" toml:"prize_amount" yaml:"prize_amount"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	RecordHash    null.Bytes  `boil:"record_hash" json:"record_hash,omitempty" toml:"record_hash" yaml:"record_hash,omitempty"`
	TXHash        null.String `boil:"tx_hash" json:"tx_hash,omitempty" toml:"tx_hash" yaml:"tx_hash,omitempty"`

	R *prizeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L prizeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PrizeColumns = struct {
	ID            string
	CompetitionID string
	PlaceBracket  string
	CurrencyCode  string
	PrizeAmount   string
	CreatedAt     string
	RecordHash    string
	TXHash        string
}{
	ID:            "id",
	CompetitionID: "competition_id",
	PlaceBracket:  "place_bracket",
	CurrencyCode:  "currency_code",
	PrizeAmount:   "prize_amount",
	CreatedAt:     "created_at",
	RecordHash:    "record_hash",
	TXHash:        "tx_hash",
}

var PrizeTableColumns = struct {
	ID            string
	CompetitionID string
	PlaceBracket  string
	CurrencyCode  string
	PrizeAmount   string
	CreatedAt     string
	RecordHash    string
	TXHash        string
}{
	ID:            "prize.id",
	CompetitionID: "prize.competition_id",
	PlaceBracket:  "prize.place_bracket",
	CurrencyCode:  "prize.currency_code",
	PrizeAmount:   "prize.prize_amount",
	CreatedAt:     "prize.created_at",
	RecordHash:    "prize.record_hash",
	TXHash:        "prize.tx_hash",
}

// Generated where

var PrizeWhere = struct {
	ID            whereHelperint64
	CompetitionID whereHelperint64
	PlaceBracket  whereHelperstring
	CurrencyCode  whereHelperstring
	PrizeAmount   whereHelperint64
	CreatedAt     whereHelpertime_Time
	RecordHash    whereHelpernull_Bytes
	TXHash        whereHelpernull_String
}{
	ID:            whereHelperint64{field: "\"prize\".\"id\""},
	CompetitionID: whereHelperint64{field: "\"prize\".\"competition_id\""},
	PlaceBracket:  whereHelperstring{field: "\"prize\".\"place_bracket\""},
	CurrencyCode:  whereHelperstring{field: "\"prize\".\"currency_code\""},
	PrizeAmount:   whereHelperint64{field: "\"prize\".\"prize_amount\""},
	CreatedAt:     whereHelpertime_Time{field: "\"prize\".\"created_at\""},
	RecordHash:    whereHelpernull_Bytes{field: "\"prize\".\"record_hash\""},
	TXHash:        whereHelpernull_String{field: "\"prize\".\"tx_hash\""},
}

// PrizeRels is where relationship names are stored.
var PrizeRels = struct {
	Competition          string
	CurrencyCodeCurrency string
	TeamAchievements     string
}{
	Competition:          "Competition",
	CurrencyCodeCurrency: "CurrencyCodeCurrency",
	TeamAchievements:     "TeamAchievements",
}

// prizeR is where relationships are stored.
type prizeR struct {
	Competition          *Competition         `boil:"Competition" json:"Competition" toml:"Competition" yaml:"Competition"`
	CurrencyCodeCurrency *Currency            `boil:"CurrencyCodeCurrency" json:"CurrencyCodeCurrency" toml:"CurrencyCodeCurrency" yaml:"CurrencyCodeCurrency"`
	TeamAchievements     TeamAchievementSlice `boil:"TeamAchievements" json:"TeamAchievements" toml:"TeamAchievements" yaml:"TeamAchievements"`
}

// NewStruct creates a new relationship struct
func (*prizeR) NewStruct() *prizeR {
	return &prizeR{}
}

func (r *prizeR) GetCompetition() *Competition {
	if r == nil {
		return nil
	}
	return r.Competition
}

func (r *prizeR) GetCurrencyCodeCurrency() *Currency {
	if r == nil {
		return nil
	}
	return r.CurrencyCodeCurrency
}

func (r *prizeR) GetTeamAchievements() TeamAchievementSlice {
	if r == nil {
		return nil
	}
	return r.TeamAchievements
}

// prizeL is where Load methods for each relationship are stored.
type prizeL struct{}

var (
	prizeAllColumns            = []string{"id", "competition_id", "place_bracket", "currency_code", "prize_amount", "created_at", "record_hash", "tx_hash"}
	prizeColumnsWithoutDefault = []string{"competition_id", "place_bracket", "currency_code", "prize_amount"}
	prizeColumnsWithDefault    = []string{"id", "created_at", "record_hash", "tx_hash"}
	prizePrimaryKeyColumns     = []string{"id"}
	prizeGeneratedColumns      = []string{}
)

type (
	// PrizeSlice is an alias for a slice of pointers to Prize.
	// This should almost always be used instead of []Prize.
	PrizeSlice []*Prize
	// PrizeHook is the signature for custom Prize hook methods
	PrizeHook func(context.Context, boil.ContextExecutor, *Prize) error

	prizeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	prizeType                 = reflect.TypeOf(&Prize{})
	prizeMapping              = queries.MakeStructMapping(prizeType)
	prizePrimaryKeyMapping, _ = queries.BindMapping(prizeType, prizeMapping, prizePrimaryKeyColumns)
	prizeInsertCacheMut       sync.RWMutex
	prizeInsertCache          = make(map[string]insertCache)
	prizeUpdateCacheMut       sync.RWMutex
	prizeUpdateCache          = make(map[string]updateCache)
	prizeUpsertCacheMut       sync.RWMutex
	prizeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var prizeAfterSelectMu sync.Mutex
var prizeAfterSelectHooks []PrizeHook

var prizeBeforeInsertMu sync.Mutex
var prizeBeforeInsertHooks []PrizeHook
var prizeAfterInsertMu sync.Mutex
var prizeAfterInsertHooks []PrizeHook

var prizeBeforeUpdateMu sync.Mutex
var prizeBeforeUpdateHooks []PrizeHook
var prizeAfterUpdateMu sync.Mutex
var prizeAfterUpdateHooks []PrizeHook

var prizeBeforeDeleteMu sync.Mutex
var prizeBeforeDeleteHooks []PrizeHook
var prizeAfterDeleteMu sync.Mutex
var prizeAfterDeleteHooks []PrizeHook

var prizeBeforeUpsertMu sync.Mutex
var prizeBeforeUpsertHooks []PrizeHook
var prizeAfterUpsertMu sync.Mutex
var prizeAfterUpsertHooks []PrizeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Prize) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Prize) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Prize) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Prize) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Prize) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Prize) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Prize) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Prize) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Prize) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prizeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPrizeHook registers your hook function for all future operations.
func AddPrizeHook(hookPoint boil.HookPoint, prizeHook PrizeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		prizeAfterSelectMu.Lock()
		prizeAfterSelectHooks = append(prizeAfterSelectHooks, prizeHook)
		prizeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		prizeBeforeInsertMu.Lock()
		prizeBeforeInsertHooks = append(prizeBeforeInsertHooks, prizeHook)
		prizeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		prizeAfterInsertMu.Lock()
		prizeAfterInsertHooks = append(prizeAfterInsertHooks, prizeHook)
		prizeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		prizeBeforeUpdateMu.Lock()
		prizeBeforeUpdateHooks = append(prizeBeforeUpdateHooks, prizeHook)
		prizeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		prizeAfterUpdateMu.Lock()
		prizeAfterUpdateHooks = append(prizeAfterUpdateHooks, prizeHook)
		prizeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		prizeBeforeDeleteMu.Lock()
		prizeBeforeDeleteHooks = append(prizeBeforeDeleteHooks, prizeHook)
		prizeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		prizeAfterDeleteMu.Lock()
		prizeAfterDeleteHooks = append(prizeAfterDeleteHooks, prizeHook)
		prizeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		prizeBeforeUpsertMu.Lock()
		prizeBeforeUpsertHooks = append(prizeBeforeUpsertHooks, prizeHook)
		prizeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		prizeAfterUpsertMu.Lock()
		prizeAfterUpsertHooks = append(prizeAfterUpsertHooks, prizeHook)
		prizeAfterUpsertMu.Unlock()
	}
}

// One returns a single prize record from the query.
func (q prizeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Prize, error) {
	o := &Prize{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for prize")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Prize records from the query.
func (q prizeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PrizeSlice, error) {
	var o []*Prize

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Prize slice")
	}

	if len(prizeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Prize records in the query.
func (q prizeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count prize rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q prizeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if prize exists")
	}

	return count > 0, nil
}

// Competition pointed to by the foreign key.
func (o *Prize) Competition(mods ...qm.QueryMod) competitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompetitionID),
	}

	queryMods = append(queryMods, mods...)

	return Competitions(queryMods...)
}

// CurrencyCodeCurrency pointed to by the foreign key.
func (o *Prize) CurrencyCodeCurrency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"code\" = ?", o.CurrencyCode),
	}

	queryMods = append(queryMods, mods...)

	return Currencies(queryMods...)
}

// TeamAchievements retrieves all the team_achievement's TeamAchievements with an executor.
func (o *Prize) TeamAchievements(mods ...qm.QueryMod) teamAchievementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"team_achievements\".\"prize_id\"=?", o.ID),
	)

	return TeamAchievements(queryMods...)
}

// LoadCompetition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (prizeL) LoadCompetition(ctx context.Context, e boil.ContextExecutor, singular bool, maybePrize interface{}, mods queries.Applicator) error {
	var slice []*Prize
	var object *Prize

	if singular {
		var ok bool
		object, ok = maybePrize.(*Prize)
		if !ok {
			object = new(Prize)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePrize)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePrize))
			}
		}
	} else {
		s, ok := maybePrize.(*[]*Prize)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePrize)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePrize))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &prizeR{}
		}
		args[object.CompetitionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &prizeR{}
			}

			args[obj.CompetitionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition`),
		qm.WhereIn(`competition.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Competition")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Competition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competition")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition")
	}

	if len(competitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Competition = foreign
		if foreign.R == nil {
			foreign.R = &competitionR{}
		}
		foreign.R.Prizes = append(foreign.R.Prizes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompetitionID == foreign.ID {
				local.R.Competition = foreign
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.Prizes = append(foreign.R.Prizes, local)
				break
			}
		}
	}

	return nil
}

// LoadCurrencyCodeCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (prizeL) LoadCurrencyCodeCurrency(ctx context.Context, e boil.ContextExecutor, singular bool, maybePrize interface{}, mods queries.Applicator) error {
	var slice []*Prize
	var object *Prize

	if singular {
		var ok bool
		object, ok = maybePrize.(*Prize)
		if !ok {
			object = new(Prize)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePrize)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePrize))
			}
		}
	} else {
		s, ok := maybePrize.(*[]*Prize)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePrize)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePrize))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &prizeR{}
		}
		args[object.CurrencyCode] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &prizeR{}
			}

			args[obj.CurrencyCode] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`currency`),
		qm.WhereIn(`currency.code in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrencyCodeCurrency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.CurrencyCodePrizes = append(foreign.R.CurrencyCodePrizes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyCode == foreign.Code {
				local.R.CurrencyCodeCurrency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.CurrencyCodePrizes = append(foreign.R.CurrencyCodePrizes, local)
				break
			}
		}
	}

	return nil
}

// LoadTeamAchievements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (prizeL) LoadTeamAchievements(ctx context.Context, e boil.ContextExecutor, singular bool, maybePrize interface{}, mods queries.Applicator) error {
	var slice []*Prize
	var object *Prize

	if singular {
		var ok bool
		object, ok = maybePrize.(*Prize)
		if !ok {
			object = new(Prize)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePrize)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePrize))
			}
		}
	} else {
		s, ok := maybePrize.(*[]*Prize)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePrize)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePrize))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &prizeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &prizeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`team_achievements`),
		qm.WhereIn(`team_achievements.prize_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load team_achievements")
	}

	var resultSlice []*TeamAchievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice team_achievements")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on team_achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team_achievements")
	}

	if len(teamAchievementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TeamAchievements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamAchievementR{}
			}
			foreign.R.Prize = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PrizeID {
				local.R.TeamAchievements = append(local.R.TeamAchievements, foreign)
				if foreign.R == nil {
					foreign.R = &teamAchievementR{}
				}
				foreign.R.Prize = local
				break
			}
		}
	}

	return nil
}

// SetCompetition of the prize to the related item.
// Sets o.R.Competition to related.
// Adds o to related.R.Prizes.
func (o *Prize) SetCompetition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Competition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"prize\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"competition_id"}),
		strmangle.WhereClause("\"", "\"", 2, prizePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompetitionID = related.ID
	if o.R == nil {
		o.R = &prizeR{
			Competition: related,
		}
	} else {
		o.R.Competition = related
	}

	if related.R == nil {
		related.R = &competitionR{
			Prizes: PrizeSlice{o},
		}
	} else {
		related.R.Prizes = append(related.R.Prizes, o)
	}

	return nil
}

// SetCurrencyCodeCurrency of the prize to the related item.
// Sets o.R.CurrencyCodeCurrency to related.
// Adds o to related.R.CurrencyCodePrizes.
func (o *Prize) SetCurrencyCodeCurrency(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"prize\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"currency_code"}),
		strmangle.WhereClause("\"", "\"", 2, prizePrimaryKeyColumns),
	)
	values := []interface{}{related.Code, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyCode = related.Code
	if o.R == nil {
		o.R = &prizeR{
			CurrencyCodeCurrency: related,
		}
	} else {
		o.R.CurrencyCodeCurrency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			CurrencyCodePrizes: PrizeSlice{o},
		}
	} else {
		related.R.CurrencyCodePrizes = append(related.R.CurrencyCodePrizes, o)
	}

	return nil
}

// AddTeamAchievements adds the given related objects to the existing relationships
// of the prize, optionally inserting them as new records.
// Appends related to o.R.TeamAchievements.
// Sets related.R.Prize appropriately.
func (o *Prize) AddTeamAchievements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TeamAchievement) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PrizeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"team_achievements\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"prize_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamAchievementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PrizeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &prizeR{
			TeamAchievements: related,
		}
	} else {
		o.R.TeamAchievements = append(o.R.TeamAchievements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamAchievementR{
				Prize: o,
			}
		} else {
			rel.R.Prize = o
		}
	}
	return nil
}

// Prizes retrieves all the records using an executor.
func Prizes(mods ...qm.QueryMod) prizeQuery {
	mods = append(mods, qm.From("\"prize\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"prize\".*"})
	}

	return prizeQuery{q}
}

// FindPrize retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPrize(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Prize, error) {
	prizeObj := &Prize{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"prize\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, prizeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from prize")
	}

	if err = prizeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return prizeObj, err
	}

	return prizeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Prize) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no prize provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prizeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	prizeInsertCacheMut.RLock()
	cache, cached := prizeInsertCache[key]
	prizeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			prizeAllColumns,
			prizeColumnsWithDefault,
			prizeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(prizeType, prizeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(prizeType, prizeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"prize\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"prize\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into prize")
	}

	if !cached {
		prizeInsertCacheMut.Lock()
		prizeInsertCache[key] = cache
		prizeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Prize.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Prize) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	prizeUpdateCacheMut.RLock()
	cache, cached := prizeUpdateCache[key]
	prizeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			prizeAllColumns,
			prizePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update prize, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"prize\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, prizePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(prizeType, prizeMapping, append(wl, prizePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update prize row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for prize")
	}

	if !cached {
		prizeUpdateCacheMut.Lock()
		prizeUpdateCache[key] = cache
		prizeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q prizeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for prize")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for prize")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PrizeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prizePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"prize\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, prizePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in prize slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all prize")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Prize) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no prize provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prizeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	prizeUpsertCacheMut.RLock()
	cache, cached := prizeUpsertCache[key]
	prizeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			prizeAllColumns,
			prizeColumnsWithDefault,
			prizeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			prizeAllColumns,
			prizePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert prize, could not build update column list")
		}

		ret := strmangle.SetComplement(prizeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(prizePrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert prize, could not build conflict column list")
			}

			conflict = make([]string, len(prizePrimaryKeyColumns))
			copy(conflict, prizePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"prize\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(prizeType, prizeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(prizeType, prizeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert prize")
	}

	if !cached {
		prizeUpsertCacheMut.Lock()
		prizeUpsertCache[key] = cache
		prizeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Prize record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Prize) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Prize provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), prizePrimaryKeyMapping)
	sql := "DELETE FROM \"prize\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from prize")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for prize")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q prizeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no prizeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from prize")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for prize")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PrizeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(prizeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prizePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"prize\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prizePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from prize slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for prize")
	}

	if len(prizeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Prize) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPrize(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PrizeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PrizeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prizePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"prize\".* FROM \"prize\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prizePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in PrizeSlice")
	}

	*o = slice

	return nil
}

// PrizeExists checks if the Prize row exists.
func PrizeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"prize\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if prize exists")
	}

	return exists, nil
}

// Exists checks if the Prize row exists.
func (o *Prize) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PrizeExists(ctx, exec, o.ID)
}
