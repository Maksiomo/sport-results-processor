// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompetitionTeam is an object representing the database table.
type CompetitionTeam struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeamID        int64       `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	CompetitionID int64       `boil:"competition_id" json:"competition_id" toml:"competition_id" yaml:"competition_id"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	RecordHash    null.Bytes  `boil:"record_hash" json:"record_hash,omitempty" toml:"record_hash" yaml:"record_hash,omitempty"`
	TXHash        null.String `boil:"tx_hash" json:"tx_hash,omitempty" toml:"tx_hash" yaml:"tx_hash,omitempty"`

	R *competitionTeamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L competitionTeamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompetitionTeamColumns = struct {
	ID            string
	TeamID        string
	CompetitionID string
	CreatedAt     string
	UpdatedAt     string
	RecordHash    string
	TXHash        string
}{
	ID:            "id",
	TeamID:        "team_id",
	CompetitionID: "competition_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	RecordHash:    "record_hash",
	TXHash:        "tx_hash",
}

var CompetitionTeamTableColumns = struct {
	ID            string
	TeamID        string
	CompetitionID string
	CreatedAt     string
	UpdatedAt     string
	RecordHash    string
	TXHash        string
}{
	ID:            "competition_teams.id",
	TeamID:        "competition_teams.team_id",
	CompetitionID: "competition_teams.competition_id",
	CreatedAt:     "competition_teams.created_at",
	UpdatedAt:     "competition_teams.updated_at",
	RecordHash:    "competition_teams.record_hash",
	TXHash:        "competition_teams.tx_hash",
}

// Generated where

var CompetitionTeamWhere = struct {
	ID            whereHelperint64
	TeamID        whereHelperint64
	CompetitionID whereHelperint64
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	RecordHash    whereHelpernull_Bytes
	TXHash        whereHelpernull_String
}{
	ID:            whereHelperint64{field: "\"competition_teams\".\"id\""},
	TeamID:        whereHelperint64{field: "\"competition_teams\".\"team_id\""},
	CompetitionID: whereHelperint64{field: "\"competition_teams\".\"competition_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"competition_teams\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"competition_teams\".\"updated_at\""},
	RecordHash:    whereHelpernull_Bytes{field: "\"competition_teams\".\"record_hash\""},
	TXHash:        whereHelpernull_String{field: "\"competition_teams\".\"tx_hash\""},
}

// CompetitionTeamRels is where relationship names are stored.
var CompetitionTeamRels = struct {
	Competition string
	Team        string
}{
	Competition: "Competition",
	Team:        "Team",
}

// competitionTeamR is where relationships are stored.
type competitionTeamR struct {
	Competition *Competition `boil:"Competition" json:"Competition" toml:"Competition" yaml:"Competition"`
	Team        *Team        `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*competitionTeamR) NewStruct() *competitionTeamR {
	return &competitionTeamR{}
}

func (r *competitionTeamR) GetCompetition() *Competition {
	if r == nil {
		return nil
	}
	return r.Competition
}

func (r *competitionTeamR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

// competitionTeamL is where Load methods for each relationship are stored.
type competitionTeamL struct{}

var (
	competitionTeamAllColumns            = []string{"id", "team_id", "competition_id", "created_at", "updated_at", "record_hash", "tx_hash"}
	competitionTeamColumnsWithoutDefault = []string{"team_id", "competition_id"}
	competitionTeamColumnsWithDefault    = []string{"id", "created_at", "updated_at", "record_hash", "tx_hash"}
	competitionTeamPrimaryKeyColumns     = []string{"id"}
	competitionTeamGeneratedColumns      = []string{}
)

type (
	// CompetitionTeamSlice is an alias for a slice of pointers to CompetitionTeam.
	// This should almost always be used instead of []CompetitionTeam.
	CompetitionTeamSlice []*CompetitionTeam
	// CompetitionTeamHook is the signature for custom CompetitionTeam hook methods
	CompetitionTeamHook func(context.Context, boil.ContextExecutor, *CompetitionTeam) error

	competitionTeamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	competitionTeamType                 = reflect.TypeOf(&CompetitionTeam{})
	competitionTeamMapping              = queries.MakeStructMapping(competitionTeamType)
	competitionTeamPrimaryKeyMapping, _ = queries.BindMapping(competitionTeamType, competitionTeamMapping, competitionTeamPrimaryKeyColumns)
	competitionTeamInsertCacheMut       sync.RWMutex
	competitionTeamInsertCache          = make(map[string]insertCache)
	competitionTeamUpdateCacheMut       sync.RWMutex
	competitionTeamUpdateCache          = make(map[string]updateCache)
	competitionTeamUpsertCacheMut       sync.RWMutex
	competitionTeamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var competitionTeamAfterSelectMu sync.Mutex
var competitionTeamAfterSelectHooks []CompetitionTeamHook

var competitionTeamBeforeInsertMu sync.Mutex
var competitionTeamBeforeInsertHooks []CompetitionTeamHook
var competitionTeamAfterInsertMu sync.Mutex
var competitionTeamAfterInsertHooks []CompetitionTeamHook

var competitionTeamBeforeUpdateMu sync.Mutex
var competitionTeamBeforeUpdateHooks []CompetitionTeamHook
var competitionTeamAfterUpdateMu sync.Mutex
var competitionTeamAfterUpdateHooks []CompetitionTeamHook

var competitionTeamBeforeDeleteMu sync.Mutex
var competitionTeamBeforeDeleteHooks []CompetitionTeamHook
var competitionTeamAfterDeleteMu sync.Mutex
var competitionTeamAfterDeleteHooks []CompetitionTeamHook

var competitionTeamBeforeUpsertMu sync.Mutex
var competitionTeamBeforeUpsertHooks []CompetitionTeamHook
var competitionTeamAfterUpsertMu sync.Mutex
var competitionTeamAfterUpsertHooks []CompetitionTeamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompetitionTeam) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompetitionTeam) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompetitionTeam) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompetitionTeam) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompetitionTeam) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompetitionTeam) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompetitionTeam) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompetitionTeam) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompetitionTeam) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionTeamAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompetitionTeamHook registers your hook function for all future operations.
func AddCompetitionTeamHook(hookPoint boil.HookPoint, competitionTeamHook CompetitionTeamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		competitionTeamAfterSelectMu.Lock()
		competitionTeamAfterSelectHooks = append(competitionTeamAfterSelectHooks, competitionTeamHook)
		competitionTeamAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		competitionTeamBeforeInsertMu.Lock()
		competitionTeamBeforeInsertHooks = append(competitionTeamBeforeInsertHooks, competitionTeamHook)
		competitionTeamBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		competitionTeamAfterInsertMu.Lock()
		competitionTeamAfterInsertHooks = append(competitionTeamAfterInsertHooks, competitionTeamHook)
		competitionTeamAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		competitionTeamBeforeUpdateMu.Lock()
		competitionTeamBeforeUpdateHooks = append(competitionTeamBeforeUpdateHooks, competitionTeamHook)
		competitionTeamBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		competitionTeamAfterUpdateMu.Lock()
		competitionTeamAfterUpdateHooks = append(competitionTeamAfterUpdateHooks, competitionTeamHook)
		competitionTeamAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		competitionTeamBeforeDeleteMu.Lock()
		competitionTeamBeforeDeleteHooks = append(competitionTeamBeforeDeleteHooks, competitionTeamHook)
		competitionTeamBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		competitionTeamAfterDeleteMu.Lock()
		competitionTeamAfterDeleteHooks = append(competitionTeamAfterDeleteHooks, competitionTeamHook)
		competitionTeamAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		competitionTeamBeforeUpsertMu.Lock()
		competitionTeamBeforeUpsertHooks = append(competitionTeamBeforeUpsertHooks, competitionTeamHook)
		competitionTeamBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		competitionTeamAfterUpsertMu.Lock()
		competitionTeamAfterUpsertHooks = append(competitionTeamAfterUpsertHooks, competitionTeamHook)
		competitionTeamAfterUpsertMu.Unlock()
	}
}

// One returns a single competitionTeam record from the query.
func (q competitionTeamQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompetitionTeam, error) {
	o := &CompetitionTeam{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for competition_teams")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompetitionTeam records from the query.
func (q competitionTeamQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompetitionTeamSlice, error) {
	var o []*CompetitionTeam

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to CompetitionTeam slice")
	}

	if len(competitionTeamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompetitionTeam records in the query.
func (q competitionTeamQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count competition_teams rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q competitionTeamQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if competition_teams exists")
	}

	return count > 0, nil
}

// Competition pointed to by the foreign key.
func (o *CompetitionTeam) Competition(mods ...qm.QueryMod) competitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompetitionID),
	}

	queryMods = append(queryMods, mods...)

	return Competitions(queryMods...)
}

// Team pointed to by the foreign key.
func (o *CompetitionTeam) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// LoadCompetition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (competitionTeamL) LoadCompetition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompetitionTeam interface{}, mods queries.Applicator) error {
	var slice []*CompetitionTeam
	var object *CompetitionTeam

	if singular {
		var ok bool
		object, ok = maybeCompetitionTeam.(*CompetitionTeam)
		if !ok {
			object = new(CompetitionTeam)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionTeam))
			}
		}
	} else {
		s, ok := maybeCompetitionTeam.(*[]*CompetitionTeam)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionTeamR{}
		}
		args[object.CompetitionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionTeamR{}
			}

			args[obj.CompetitionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition`),
		qm.WhereIn(`competition.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Competition")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Competition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competition")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition")
	}

	if len(competitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Competition = foreign
		if foreign.R == nil {
			foreign.R = &competitionR{}
		}
		foreign.R.CompetitionTeams = append(foreign.R.CompetitionTeams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompetitionID == foreign.ID {
				local.R.Competition = foreign
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.CompetitionTeams = append(foreign.R.CompetitionTeams, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (competitionTeamL) LoadTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompetitionTeam interface{}, mods queries.Applicator) error {
	var slice []*CompetitionTeam
	var object *CompetitionTeam

	if singular {
		var ok bool
		object, ok = maybeCompetitionTeam.(*CompetitionTeam)
		if !ok {
			object = new(CompetitionTeam)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompetitionTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompetitionTeam))
			}
		}
	} else {
		s, ok := maybeCompetitionTeam.(*[]*CompetitionTeam)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompetitionTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompetitionTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &competitionTeamR{}
		}
		args[object.TeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionTeamR{}
			}

			args[obj.TeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`team`),
		qm.WhereIn(`team.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for team")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.CompetitionTeams = append(foreign.R.CompetitionTeams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.ID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.CompetitionTeams = append(foreign.R.CompetitionTeams, local)
				break
			}
		}
	}

	return nil
}

// SetCompetition of the competitionTeam to the related item.
// Sets o.R.Competition to related.
// Adds o to related.R.CompetitionTeams.
func (o *CompetitionTeam) SetCompetition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Competition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"competition_teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"competition_id"}),
		strmangle.WhereClause("\"", "\"", 2, competitionTeamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompetitionID = related.ID
	if o.R == nil {
		o.R = &competitionTeamR{
			Competition: related,
		}
	} else {
		o.R.Competition = related
	}

	if related.R == nil {
		related.R = &competitionR{
			CompetitionTeams: CompetitionTeamSlice{o},
		}
	} else {
		related.R.CompetitionTeams = append(related.R.CompetitionTeams, o)
	}

	return nil
}

// SetTeam of the competitionTeam to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.CompetitionTeams.
func (o *CompetitionTeam) SetTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"competition_teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, competitionTeamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.ID
	if o.R == nil {
		o.R = &competitionTeamR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			CompetitionTeams: CompetitionTeamSlice{o},
		}
	} else {
		related.R.CompetitionTeams = append(related.R.CompetitionTeams, o)
	}

	return nil
}

// CompetitionTeams retrieves all the records using an executor.
func CompetitionTeams(mods ...qm.QueryMod) competitionTeamQuery {
	mods = append(mods, qm.From("\"competition_teams\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"competition_teams\".*"})
	}

	return competitionTeamQuery{q}
}

// FindCompetitionTeam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompetitionTeam(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CompetitionTeam, error) {
	competitionTeamObj := &CompetitionTeam{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"competition_teams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, competitionTeamObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from competition_teams")
	}

	if err = competitionTeamObj.doAfterSelectHooks(ctx, exec); err != nil {
		return competitionTeamObj, err
	}

	return competitionTeamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompetitionTeam) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no competition_teams provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionTeamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	competitionTeamInsertCacheMut.RLock()
	cache, cached := competitionTeamInsertCache[key]
	competitionTeamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			competitionTeamAllColumns,
			competitionTeamColumnsWithDefault,
			competitionTeamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(competitionTeamType, competitionTeamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(competitionTeamType, competitionTeamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"competition_teams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"competition_teams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into competition_teams")
	}

	if !cached {
		competitionTeamInsertCacheMut.Lock()
		competitionTeamInsertCache[key] = cache
		competitionTeamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompetitionTeam.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompetitionTeam) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	competitionTeamUpdateCacheMut.RLock()
	cache, cached := competitionTeamUpdateCache[key]
	competitionTeamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			competitionTeamAllColumns,
			competitionTeamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update competition_teams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"competition_teams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, competitionTeamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(competitionTeamType, competitionTeamMapping, append(wl, competitionTeamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update competition_teams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for competition_teams")
	}

	if !cached {
		competitionTeamUpdateCacheMut.Lock()
		competitionTeamUpdateCache[key] = cache
		competitionTeamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q competitionTeamQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for competition_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for competition_teams")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompetitionTeamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"competition_teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, competitionTeamPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in competitionTeam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all competitionTeam")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompetitionTeam) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no competition_teams provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionTeamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	competitionTeamUpsertCacheMut.RLock()
	cache, cached := competitionTeamUpsertCache[key]
	competitionTeamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			competitionTeamAllColumns,
			competitionTeamColumnsWithDefault,
			competitionTeamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			competitionTeamAllColumns,
			competitionTeamPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert competition_teams, could not build update column list")
		}

		ret := strmangle.SetComplement(competitionTeamAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(competitionTeamPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert competition_teams, could not build conflict column list")
			}

			conflict = make([]string, len(competitionTeamPrimaryKeyColumns))
			copy(conflict, competitionTeamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"competition_teams\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(competitionTeamType, competitionTeamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(competitionTeamType, competitionTeamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert competition_teams")
	}

	if !cached {
		competitionTeamUpsertCacheMut.Lock()
		competitionTeamUpsertCache[key] = cache
		competitionTeamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompetitionTeam record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompetitionTeam) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no CompetitionTeam provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), competitionTeamPrimaryKeyMapping)
	sql := "DELETE FROM \"competition_teams\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from competition_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for competition_teams")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q competitionTeamQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no competitionTeamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from competition_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for competition_teams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompetitionTeamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(competitionTeamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"competition_teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, competitionTeamPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from competitionTeam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for competition_teams")
	}

	if len(competitionTeamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompetitionTeam) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompetitionTeam(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompetitionTeamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompetitionTeamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"competition_teams\".* FROM \"competition_teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, competitionTeamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in CompetitionTeamSlice")
	}

	*o = slice

	return nil
}

// CompetitionTeamExists checks if the CompetitionTeam row exists.
func CompetitionTeamExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"competition_teams\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if competition_teams exists")
	}

	return exists, nil
}

// Exists checks if the CompetitionTeam row exists.
func (o *CompetitionTeam) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CompetitionTeamExists(ctx, exec, o.ID)
}
