// Code generated by SQLBoiler 4.19.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PersonSport is an object representing the database table.
type PersonSport struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	PersonID  int64     `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	SportID   int64     `boil:"sport_id" json:"sport_id" toml:"sport_id" yaml:"sport_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *personSportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personSportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonSportColumns = struct {
	ID        string
	PersonID  string
	SportID   string
	CreatedAt string
}{
	ID:        "id",
	PersonID:  "person_id",
	SportID:   "sport_id",
	CreatedAt: "created_at",
}

var PersonSportTableColumns = struct {
	ID        string
	PersonID  string
	SportID   string
	CreatedAt string
}{
	ID:        "person_sport.id",
	PersonID:  "person_sport.person_id",
	SportID:   "person_sport.sport_id",
	CreatedAt: "person_sport.created_at",
}

// Generated where

var PersonSportWhere = struct {
	ID        whereHelperint64
	PersonID  whereHelperint64
	SportID   whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"person_sport\".\"id\""},
	PersonID:  whereHelperint64{field: "\"person_sport\".\"person_id\""},
	SportID:   whereHelperint64{field: "\"person_sport\".\"sport_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"person_sport\".\"created_at\""},
}

// PersonSportRels is where relationship names are stored.
var PersonSportRels = struct {
	Person string
	Sport  string
}{
	Person: "Person",
	Sport:  "Sport",
}

// personSportR is where relationships are stored.
type personSportR struct {
	Person *Person `boil:"Person" json:"Person" toml:"Person" yaml:"Person"`
	Sport  *Sport  `boil:"Sport" json:"Sport" toml:"Sport" yaml:"Sport"`
}

// NewStruct creates a new relationship struct
func (*personSportR) NewStruct() *personSportR {
	return &personSportR{}
}

func (o *PersonSport) GetPerson() *Person {
	if o == nil {
		return nil
	}

	return o.R.GetPerson()
}

func (r *personSportR) GetPerson() *Person {
	if r == nil {
		return nil
	}

	return r.Person
}

func (o *PersonSport) GetSport() *Sport {
	if o == nil {
		return nil
	}

	return o.R.GetSport()
}

func (r *personSportR) GetSport() *Sport {
	if r == nil {
		return nil
	}

	return r.Sport
}

// personSportL is where Load methods for each relationship are stored.
type personSportL struct{}

var (
	personSportAllColumns            = []string{"id", "person_id", "sport_id", "created_at"}
	personSportColumnsWithoutDefault = []string{"person_id", "sport_id"}
	personSportColumnsWithDefault    = []string{"id", "created_at"}
	personSportPrimaryKeyColumns     = []string{"id"}
	personSportGeneratedColumns      = []string{}
)

type (
	// PersonSportSlice is an alias for a slice of pointers to PersonSport.
	// This should almost always be used instead of []PersonSport.
	PersonSportSlice []*PersonSport
	// PersonSportHook is the signature for custom PersonSport hook methods
	PersonSportHook func(context.Context, boil.ContextExecutor, *PersonSport) error

	personSportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personSportType                 = reflect.TypeOf(&PersonSport{})
	personSportMapping              = queries.MakeStructMapping(personSportType)
	personSportPrimaryKeyMapping, _ = queries.BindMapping(personSportType, personSportMapping, personSportPrimaryKeyColumns)
	personSportInsertCacheMut       sync.RWMutex
	personSportInsertCache          = make(map[string]insertCache)
	personSportUpdateCacheMut       sync.RWMutex
	personSportUpdateCache          = make(map[string]updateCache)
	personSportUpsertCacheMut       sync.RWMutex
	personSportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var personSportAfterSelectMu sync.Mutex
var personSportAfterSelectHooks []PersonSportHook

var personSportBeforeInsertMu sync.Mutex
var personSportBeforeInsertHooks []PersonSportHook
var personSportAfterInsertMu sync.Mutex
var personSportAfterInsertHooks []PersonSportHook

var personSportBeforeUpdateMu sync.Mutex
var personSportBeforeUpdateHooks []PersonSportHook
var personSportAfterUpdateMu sync.Mutex
var personSportAfterUpdateHooks []PersonSportHook

var personSportBeforeDeleteMu sync.Mutex
var personSportBeforeDeleteHooks []PersonSportHook
var personSportAfterDeleteMu sync.Mutex
var personSportAfterDeleteHooks []PersonSportHook

var personSportBeforeUpsertMu sync.Mutex
var personSportBeforeUpsertHooks []PersonSportHook
var personSportAfterUpsertMu sync.Mutex
var personSportAfterUpsertHooks []PersonSportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PersonSport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PersonSport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PersonSport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PersonSport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PersonSport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PersonSport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PersonSport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PersonSport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PersonSport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personSportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPersonSportHook registers your hook function for all future operations.
func AddPersonSportHook(hookPoint boil.HookPoint, personSportHook PersonSportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		personSportAfterSelectMu.Lock()
		personSportAfterSelectHooks = append(personSportAfterSelectHooks, personSportHook)
		personSportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		personSportBeforeInsertMu.Lock()
		personSportBeforeInsertHooks = append(personSportBeforeInsertHooks, personSportHook)
		personSportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		personSportAfterInsertMu.Lock()
		personSportAfterInsertHooks = append(personSportAfterInsertHooks, personSportHook)
		personSportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		personSportBeforeUpdateMu.Lock()
		personSportBeforeUpdateHooks = append(personSportBeforeUpdateHooks, personSportHook)
		personSportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		personSportAfterUpdateMu.Lock()
		personSportAfterUpdateHooks = append(personSportAfterUpdateHooks, personSportHook)
		personSportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		personSportBeforeDeleteMu.Lock()
		personSportBeforeDeleteHooks = append(personSportBeforeDeleteHooks, personSportHook)
		personSportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		personSportAfterDeleteMu.Lock()
		personSportAfterDeleteHooks = append(personSportAfterDeleteHooks, personSportHook)
		personSportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		personSportBeforeUpsertMu.Lock()
		personSportBeforeUpsertHooks = append(personSportBeforeUpsertHooks, personSportHook)
		personSportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		personSportAfterUpsertMu.Lock()
		personSportAfterUpsertHooks = append(personSportAfterUpsertHooks, personSportHook)
		personSportAfterUpsertMu.Unlock()
	}
}

// One returns a single personSport record from the query.
func (q personSportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PersonSport, error) {
	o := &PersonSport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for person_sport")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PersonSport records from the query.
func (q personSportQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonSportSlice, error) {
	var o []*PersonSport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to PersonSport slice")
	}

	if len(personSportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PersonSport records in the query.
func (q personSportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count person_sport rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q personSportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if person_sport exists")
	}

	return count > 0, nil
}

// Person pointed to by the foreign key.
func (o *PersonSport) Person(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PersonID),
	}

	queryMods = append(queryMods, mods...)

	return People(queryMods...)
}

// Sport pointed to by the foreign key.
func (o *PersonSport) Sport(mods ...qm.QueryMod) sportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SportID),
	}

	queryMods = append(queryMods, mods...)

	return Sports(queryMods...)
}

// LoadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (personSportL) LoadPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybePersonSport interface{}, mods queries.Applicator) error {
	var slice []*PersonSport
	var object *PersonSport

	if singular {
		var ok bool
		object, ok = maybePersonSport.(*PersonSport)
		if !ok {
			object = new(PersonSport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePersonSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePersonSport))
			}
		}
	} else {
		s, ok := maybePersonSport.(*[]*PersonSport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePersonSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePersonSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &personSportR{}
		}
		args[object.PersonID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personSportR{}
			}

			args[obj.PersonID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`person`),
		qm.WhereIn(`person.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Person = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.PersonSports = append(foreign.R.PersonSports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonID == foreign.ID {
				local.R.Person = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.PersonSports = append(foreign.R.PersonSports, local)
				break
			}
		}
	}

	return nil
}

// LoadSport allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (personSportL) LoadSport(ctx context.Context, e boil.ContextExecutor, singular bool, maybePersonSport interface{}, mods queries.Applicator) error {
	var slice []*PersonSport
	var object *PersonSport

	if singular {
		var ok bool
		object, ok = maybePersonSport.(*PersonSport)
		if !ok {
			object = new(PersonSport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePersonSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePersonSport))
			}
		}
	} else {
		s, ok := maybePersonSport.(*[]*PersonSport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePersonSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePersonSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &personSportR{}
		}
		args[object.SportID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personSportR{}
			}

			args[obj.SportID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sport`),
		qm.WhereIn(`sport.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sport")
	}

	var resultSlice []*Sport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sport")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sport")
	}

	if len(sportAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sport = foreign
		if foreign.R == nil {
			foreign.R = &sportR{}
		}
		foreign.R.PersonSports = append(foreign.R.PersonSports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SportID == foreign.ID {
				local.R.Sport = foreign
				if foreign.R == nil {
					foreign.R = &sportR{}
				}
				foreign.R.PersonSports = append(foreign.R.PersonSports, local)
				break
			}
		}
	}

	return nil
}

// SetPerson of the personSport to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.PersonSports.
func (o *PersonSport) SetPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"person_sport\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
		strmangle.WhereClause("\"", "\"", 2, personSportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonID = related.ID
	if o.R == nil {
		o.R = &personSportR{
			Person: related,
		}
	} else {
		o.R.Person = related
	}

	if related.R == nil {
		related.R = &personR{
			PersonSports: PersonSportSlice{o},
		}
	} else {
		related.R.PersonSports = append(related.R.PersonSports, o)
	}

	return nil
}

// SetSport of the personSport to the related item.
// Sets o.R.Sport to related.
// Adds o to related.R.PersonSports.
func (o *PersonSport) SetSport(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sport) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"person_sport\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
		strmangle.WhereClause("\"", "\"", 2, personSportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SportID = related.ID
	if o.R == nil {
		o.R = &personSportR{
			Sport: related,
		}
	} else {
		o.R.Sport = related
	}

	if related.R == nil {
		related.R = &sportR{
			PersonSports: PersonSportSlice{o},
		}
	} else {
		related.R.PersonSports = append(related.R.PersonSports, o)
	}

	return nil
}

// PersonSports retrieves all the records using an executor.
func PersonSports(mods ...qm.QueryMod) personSportQuery {
	mods = append(mods, qm.From("\"person_sport\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"person_sport\".*"})
	}

	return personSportQuery{q}
}

// FindPersonSport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPersonSport(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PersonSport, error) {
	personSportObj := &PersonSport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"person_sport\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, personSportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from person_sport")
	}

	if err = personSportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return personSportObj, err
	}

	return personSportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PersonSport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no person_sport provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personSportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personSportInsertCacheMut.RLock()
	cache, cached := personSportInsertCache[key]
	personSportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personSportAllColumns,
			personSportColumnsWithDefault,
			personSportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(personSportType, personSportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personSportType, personSportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"person_sport\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"person_sport\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into person_sport")
	}

	if !cached {
		personSportInsertCacheMut.Lock()
		personSportInsertCache[key] = cache
		personSportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PersonSport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PersonSport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	personSportUpdateCacheMut.RLock()
	cache, cached := personSportUpdateCache[key]
	personSportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personSportAllColumns,
			personSportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update person_sport, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"person_sport\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, personSportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personSportType, personSportMapping, append(wl, personSportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update person_sport row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for person_sport")
	}

	if !cached {
		personSportUpdateCacheMut.Lock()
		personSportUpdateCache[key] = cache
		personSportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q personSportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for person_sport")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for person_sport")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonSportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personSportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"person_sport\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, personSportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in personSport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all personSport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PersonSport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no person_sport provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personSportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	personSportUpsertCacheMut.RLock()
	cache, cached := personSportUpsertCache[key]
	personSportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			personSportAllColumns,
			personSportColumnsWithDefault,
			personSportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			personSportAllColumns,
			personSportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert person_sport, could not build update column list")
		}

		ret := strmangle.SetComplement(personSportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(personSportPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert person_sport, could not build conflict column list")
			}

			conflict = make([]string, len(personSportPrimaryKeyColumns))
			copy(conflict, personSportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"person_sport\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(personSportType, personSportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(personSportType, personSportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert person_sport")
	}

	if !cached {
		personSportUpsertCacheMut.Lock()
		personSportUpsertCache[key] = cache
		personSportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PersonSport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PersonSport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no PersonSport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personSportPrimaryKeyMapping)
	sql := "DELETE FROM \"person_sport\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from person_sport")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for person_sport")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q personSportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no personSportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from person_sport")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for person_sport")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonSportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(personSportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personSportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"person_sport\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personSportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from personSport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for person_sport")
	}

	if len(personSportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PersonSport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPersonSport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonSportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonSportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personSportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"person_sport\".* FROM \"person_sport\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personSportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in PersonSportSlice")
	}

	*o = slice

	return nil
}

// PersonSportExists checks if the PersonSport row exists.
func PersonSportExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"person_sport\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if person_sport exists")
	}

	return exists, nil
}

// Exists checks if the PersonSport row exists.
func (o *PersonSport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PersonSportExists(ctx, exec, o.ID)
}
