// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchParticipant is an object representing the database table.
type MatchParticipant struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	MatchID    int64       `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	TeamID     int64       `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	Score      int         `boil:"score" json:"score" toml:"score" yaml:"score"`
	IsWinner   bool        `boil:"is_winner" json:"is_winner" toml:"is_winner" yaml:"is_winner"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	RecordHash null.Bytes  `boil:"record_hash" json:"record_hash,omitempty" toml:"record_hash" yaml:"record_hash,omitempty"`
	TXHash     null.String `boil:"tx_hash" json:"tx_hash,omitempty" toml:"tx_hash" yaml:"tx_hash,omitempty"`

	R *matchParticipantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchParticipantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchParticipantColumns = struct {
	ID         string
	MatchID    string
	TeamID     string
	Score      string
	IsWinner   string
	CreatedAt  string
	RecordHash string
	TXHash     string
}{
	ID:         "id",
	MatchID:    "match_id",
	TeamID:     "team_id",
	Score:      "score",
	IsWinner:   "is_winner",
	CreatedAt:  "created_at",
	RecordHash: "record_hash",
	TXHash:     "tx_hash",
}

var MatchParticipantTableColumns = struct {
	ID         string
	MatchID    string
	TeamID     string
	Score      string
	IsWinner   string
	CreatedAt  string
	RecordHash string
	TXHash     string
}{
	ID:         "match_participant.id",
	MatchID:    "match_participant.match_id",
	TeamID:     "match_participant.team_id",
	Score:      "match_participant.score",
	IsWinner:   "match_participant.is_winner",
	CreatedAt:  "match_participant.created_at",
	RecordHash: "match_participant.record_hash",
	TXHash:     "match_participant.tx_hash",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var MatchParticipantWhere = struct {
	ID         whereHelperint64
	MatchID    whereHelperint64
	TeamID     whereHelperint64
	Score      whereHelperint
	IsWinner   whereHelperbool
	CreatedAt  whereHelpertime_Time
	RecordHash whereHelpernull_Bytes
	TXHash     whereHelpernull_String
}{
	ID:         whereHelperint64{field: "\"match_participant\".\"id\""},
	MatchID:    whereHelperint64{field: "\"match_participant\".\"match_id\""},
	TeamID:     whereHelperint64{field: "\"match_participant\".\"team_id\""},
	Score:      whereHelperint{field: "\"match_participant\".\"score\""},
	IsWinner:   whereHelperbool{field: "\"match_participant\".\"is_winner\""},
	CreatedAt:  whereHelpertime_Time{field: "\"match_participant\".\"created_at\""},
	RecordHash: whereHelpernull_Bytes{field: "\"match_participant\".\"record_hash\""},
	TXHash:     whereHelpernull_String{field: "\"match_participant\".\"tx_hash\""},
}

// MatchParticipantRels is where relationship names are stored.
var MatchParticipantRels = struct {
	Match string
	Team  string
}{
	Match: "Match",
	Team:  "Team",
}

// matchParticipantR is where relationships are stored.
type matchParticipantR struct {
	Match *Match `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
	Team  *Team  `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*matchParticipantR) NewStruct() *matchParticipantR {
	return &matchParticipantR{}
}

func (r *matchParticipantR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

func (r *matchParticipantR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

// matchParticipantL is where Load methods for each relationship are stored.
type matchParticipantL struct{}

var (
	matchParticipantAllColumns            = []string{"id", "match_id", "team_id", "score", "is_winner", "created_at", "record_hash", "tx_hash"}
	matchParticipantColumnsWithoutDefault = []string{"match_id", "team_id", "score"}
	matchParticipantColumnsWithDefault    = []string{"id", "is_winner", "created_at", "record_hash", "tx_hash"}
	matchParticipantPrimaryKeyColumns     = []string{"id"}
	matchParticipantGeneratedColumns      = []string{}
)

type (
	// MatchParticipantSlice is an alias for a slice of pointers to MatchParticipant.
	// This should almost always be used instead of []MatchParticipant.
	MatchParticipantSlice []*MatchParticipant
	// MatchParticipantHook is the signature for custom MatchParticipant hook methods
	MatchParticipantHook func(context.Context, boil.ContextExecutor, *MatchParticipant) error

	matchParticipantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchParticipantType                 = reflect.TypeOf(&MatchParticipant{})
	matchParticipantMapping              = queries.MakeStructMapping(matchParticipantType)
	matchParticipantPrimaryKeyMapping, _ = queries.BindMapping(matchParticipantType, matchParticipantMapping, matchParticipantPrimaryKeyColumns)
	matchParticipantInsertCacheMut       sync.RWMutex
	matchParticipantInsertCache          = make(map[string]insertCache)
	matchParticipantUpdateCacheMut       sync.RWMutex
	matchParticipantUpdateCache          = make(map[string]updateCache)
	matchParticipantUpsertCacheMut       sync.RWMutex
	matchParticipantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var matchParticipantAfterSelectMu sync.Mutex
var matchParticipantAfterSelectHooks []MatchParticipantHook

var matchParticipantBeforeInsertMu sync.Mutex
var matchParticipantBeforeInsertHooks []MatchParticipantHook
var matchParticipantAfterInsertMu sync.Mutex
var matchParticipantAfterInsertHooks []MatchParticipantHook

var matchParticipantBeforeUpdateMu sync.Mutex
var matchParticipantBeforeUpdateHooks []MatchParticipantHook
var matchParticipantAfterUpdateMu sync.Mutex
var matchParticipantAfterUpdateHooks []MatchParticipantHook

var matchParticipantBeforeDeleteMu sync.Mutex
var matchParticipantBeforeDeleteHooks []MatchParticipantHook
var matchParticipantAfterDeleteMu sync.Mutex
var matchParticipantAfterDeleteHooks []MatchParticipantHook

var matchParticipantBeforeUpsertMu sync.Mutex
var matchParticipantBeforeUpsertHooks []MatchParticipantHook
var matchParticipantAfterUpsertMu sync.Mutex
var matchParticipantAfterUpsertHooks []MatchParticipantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MatchParticipant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MatchParticipant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MatchParticipant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MatchParticipant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MatchParticipant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MatchParticipant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MatchParticipant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MatchParticipant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MatchParticipant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchParticipantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMatchParticipantHook registers your hook function for all future operations.
func AddMatchParticipantHook(hookPoint boil.HookPoint, matchParticipantHook MatchParticipantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		matchParticipantAfterSelectMu.Lock()
		matchParticipantAfterSelectHooks = append(matchParticipantAfterSelectHooks, matchParticipantHook)
		matchParticipantAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		matchParticipantBeforeInsertMu.Lock()
		matchParticipantBeforeInsertHooks = append(matchParticipantBeforeInsertHooks, matchParticipantHook)
		matchParticipantBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		matchParticipantAfterInsertMu.Lock()
		matchParticipantAfterInsertHooks = append(matchParticipantAfterInsertHooks, matchParticipantHook)
		matchParticipantAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		matchParticipantBeforeUpdateMu.Lock()
		matchParticipantBeforeUpdateHooks = append(matchParticipantBeforeUpdateHooks, matchParticipantHook)
		matchParticipantBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		matchParticipantAfterUpdateMu.Lock()
		matchParticipantAfterUpdateHooks = append(matchParticipantAfterUpdateHooks, matchParticipantHook)
		matchParticipantAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		matchParticipantBeforeDeleteMu.Lock()
		matchParticipantBeforeDeleteHooks = append(matchParticipantBeforeDeleteHooks, matchParticipantHook)
		matchParticipantBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		matchParticipantAfterDeleteMu.Lock()
		matchParticipantAfterDeleteHooks = append(matchParticipantAfterDeleteHooks, matchParticipantHook)
		matchParticipantAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		matchParticipantBeforeUpsertMu.Lock()
		matchParticipantBeforeUpsertHooks = append(matchParticipantBeforeUpsertHooks, matchParticipantHook)
		matchParticipantBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		matchParticipantAfterUpsertMu.Lock()
		matchParticipantAfterUpsertHooks = append(matchParticipantAfterUpsertHooks, matchParticipantHook)
		matchParticipantAfterUpsertMu.Unlock()
	}
}

// One returns a single matchParticipant record from the query.
func (q matchParticipantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MatchParticipant, error) {
	o := &MatchParticipant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for match_participant")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MatchParticipant records from the query.
func (q matchParticipantQuery) All(ctx context.Context, exec boil.ContextExecutor) (MatchParticipantSlice, error) {
	var o []*MatchParticipant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to MatchParticipant slice")
	}

	if len(matchParticipantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MatchParticipant records in the query.
func (q matchParticipantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count match_participant rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchParticipantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if match_participant exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *MatchParticipant) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// Team pointed to by the foreign key.
func (o *MatchParticipant) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchParticipantL) LoadMatch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMatchParticipant interface{}, mods queries.Applicator) error {
	var slice []*MatchParticipant
	var object *MatchParticipant

	if singular {
		var ok bool
		object, ok = maybeMatchParticipant.(*MatchParticipant)
		if !ok {
			object = new(MatchParticipant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchParticipant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchParticipant))
			}
		}
	} else {
		s, ok := maybeMatchParticipant.(*[]*MatchParticipant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchParticipant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchParticipant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchParticipantR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchParticipantR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match`),
		qm.WhereIn(`match.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for match")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.MatchParticipants = append(foreign.R.MatchParticipants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchParticipants = append(foreign.R.MatchParticipants, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchParticipantL) LoadTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMatchParticipant interface{}, mods queries.Applicator) error {
	var slice []*MatchParticipant
	var object *MatchParticipant

	if singular {
		var ok bool
		object, ok = maybeMatchParticipant.(*MatchParticipant)
		if !ok {
			object = new(MatchParticipant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchParticipant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchParticipant))
			}
		}
	} else {
		s, ok := maybeMatchParticipant.(*[]*MatchParticipant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchParticipant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchParticipant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchParticipantR{}
		}
		args[object.TeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchParticipantR{}
			}

			args[obj.TeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`team`),
		qm.WhereIn(`team.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for team")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.MatchParticipants = append(foreign.R.MatchParticipants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.ID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.MatchParticipants = append(foreign.R.MatchParticipants, local)
				break
			}
		}
	}

	return nil
}

// SetMatch of the matchParticipant to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.MatchParticipants.
func (o *MatchParticipant) SetMatch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_participant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchParticipantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &matchParticipantR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			MatchParticipants: MatchParticipantSlice{o},
		}
	} else {
		related.R.MatchParticipants = append(related.R.MatchParticipants, o)
	}

	return nil
}

// SetTeam of the matchParticipant to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.MatchParticipants.
func (o *MatchParticipant) SetTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_participant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchParticipantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.ID
	if o.R == nil {
		o.R = &matchParticipantR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			MatchParticipants: MatchParticipantSlice{o},
		}
	} else {
		related.R.MatchParticipants = append(related.R.MatchParticipants, o)
	}

	return nil
}

// MatchParticipants retrieves all the records using an executor.
func MatchParticipants(mods ...qm.QueryMod) matchParticipantQuery {
	mods = append(mods, qm.From("\"match_participant\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_participant\".*"})
	}

	return matchParticipantQuery{q}
}

// FindMatchParticipant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchParticipant(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MatchParticipant, error) {
	matchParticipantObj := &MatchParticipant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_participant\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, matchParticipantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from match_participant")
	}

	if err = matchParticipantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return matchParticipantObj, err
	}

	return matchParticipantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchParticipant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no match_participant provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matchParticipantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchParticipantInsertCacheMut.RLock()
	cache, cached := matchParticipantInsertCache[key]
	matchParticipantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchParticipantAllColumns,
			matchParticipantColumnsWithDefault,
			matchParticipantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchParticipantType, matchParticipantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchParticipantType, matchParticipantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_participant\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_participant\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into match_participant")
	}

	if !cached {
		matchParticipantInsertCacheMut.Lock()
		matchParticipantInsertCache[key] = cache
		matchParticipantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MatchParticipant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchParticipant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	matchParticipantUpdateCacheMut.RLock()
	cache, cached := matchParticipantUpdateCache[key]
	matchParticipantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchParticipantAllColumns,
			matchParticipantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update match_participant, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_participant\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchParticipantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchParticipantType, matchParticipantMapping, append(wl, matchParticipantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update match_participant row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for match_participant")
	}

	if !cached {
		matchParticipantUpdateCacheMut.Lock()
		matchParticipantUpdateCache[key] = cache
		matchParticipantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q matchParticipantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for match_participant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for match_participant")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchParticipantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_participant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchParticipantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in matchParticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all matchParticipant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchParticipant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no match_participant provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matchParticipantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchParticipantUpsertCacheMut.RLock()
	cache, cached := matchParticipantUpsertCache[key]
	matchParticipantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchParticipantAllColumns,
			matchParticipantColumnsWithDefault,
			matchParticipantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchParticipantAllColumns,
			matchParticipantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert match_participant, could not build update column list")
		}

		ret := strmangle.SetComplement(matchParticipantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchParticipantPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert match_participant, could not build conflict column list")
			}

			conflict = make([]string, len(matchParticipantPrimaryKeyColumns))
			copy(conflict, matchParticipantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_participant\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchParticipantType, matchParticipantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchParticipantType, matchParticipantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert match_participant")
	}

	if !cached {
		matchParticipantUpsertCacheMut.Lock()
		matchParticipantUpsertCache[key] = cache
		matchParticipantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MatchParticipant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchParticipant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no MatchParticipant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchParticipantPrimaryKeyMapping)
	sql := "DELETE FROM \"match_participant\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from match_participant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for match_participant")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchParticipantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no matchParticipantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from match_participant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for match_participant")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchParticipantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(matchParticipantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_participant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchParticipantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from matchParticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for match_participant")
	}

	if len(matchParticipantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchParticipant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMatchParticipant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchParticipantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchParticipantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_participant\".* FROM \"match_participant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchParticipantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in MatchParticipantSlice")
	}

	*o = slice

	return nil
}

// MatchParticipantExists checks if the MatchParticipant row exists.
func MatchParticipantExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_participant\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if match_participant exists")
	}

	return exists, nil
}

// Exists checks if the MatchParticipant row exists.
func (o *MatchParticipant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MatchParticipantExists(ctx, exec, o.ID)
}
