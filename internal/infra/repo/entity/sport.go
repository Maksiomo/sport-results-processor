// Code generated by SQLBoiler 4.19.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sport is an object representing the database table.
type Sport struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	MinTeamSize int         `boil:"min_team_size" json:"min_team_size" toml:"min_team_size" yaml:"min_team_size"`
	MaxTeamSize int         `boil:"max_team_size" json:"max_team_size" toml:"max_team_size" yaml:"max_team_size"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	TXHash      null.String `boil:"tx_hash" json:"tx_hash,omitempty" toml:"tx_hash" yaml:"tx_hash,omitempty"`

	R *sportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SportColumns = struct {
	ID          string
	Name        string
	MinTeamSize string
	MaxTeamSize string
	Description string
	CreatedAt   string
	TXHash      string
}{
	ID:          "id",
	Name:        "name",
	MinTeamSize: "min_team_size",
	MaxTeamSize: "max_team_size",
	Description: "description",
	CreatedAt:   "created_at",
	TXHash:      "tx_hash",
}

var SportTableColumns = struct {
	ID          string
	Name        string
	MinTeamSize string
	MaxTeamSize string
	Description string
	CreatedAt   string
	TXHash      string
}{
	ID:          "sport.id",
	Name:        "sport.name",
	MinTeamSize: "sport.min_team_size",
	MaxTeamSize: "sport.max_team_size",
	Description: "sport.description",
	CreatedAt:   "sport.created_at",
	TXHash:      "sport.tx_hash",
}

// Generated where

var SportWhere = struct {
	ID          whereHelperint64
	Name        whereHelperstring
	MinTeamSize whereHelperint
	MaxTeamSize whereHelperint
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	TXHash      whereHelpernull_String
}{
	ID:          whereHelperint64{field: "\"sport\".\"id\""},
	Name:        whereHelperstring{field: "\"sport\".\"name\""},
	MinTeamSize: whereHelperint{field: "\"sport\".\"min_team_size\""},
	MaxTeamSize: whereHelperint{field: "\"sport\".\"max_team_size\""},
	Description: whereHelpernull_String{field: "\"sport\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"sport\".\"created_at\""},
	TXHash:      whereHelpernull_String{field: "\"sport\".\"tx_hash\""},
}

// SportRels is where relationship names are stored.
var SportRels = struct {
	Competitions string
	PersonSports string
}{
	Competitions: "Competitions",
	PersonSports: "PersonSports",
}

// sportR is where relationships are stored.
type sportR struct {
	Competitions CompetitionSlice `boil:"Competitions" json:"Competitions" toml:"Competitions" yaml:"Competitions"`
	PersonSports PersonSportSlice `boil:"PersonSports" json:"PersonSports" toml:"PersonSports" yaml:"PersonSports"`
}

// NewStruct creates a new relationship struct
func (*sportR) NewStruct() *sportR {
	return &sportR{}
}

func (o *Sport) GetCompetitions() CompetitionSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCompetitions()
}

func (r *sportR) GetCompetitions() CompetitionSlice {
	if r == nil {
		return nil
	}

	return r.Competitions
}

func (o *Sport) GetPersonSports() PersonSportSlice {
	if o == nil {
		return nil
	}

	return o.R.GetPersonSports()
}

func (r *sportR) GetPersonSports() PersonSportSlice {
	if r == nil {
		return nil
	}

	return r.PersonSports
}

// sportL is where Load methods for each relationship are stored.
type sportL struct{}

var (
	sportAllColumns            = []string{"id", "name", "min_team_size", "max_team_size", "description", "created_at", "tx_hash"}
	sportColumnsWithoutDefault = []string{"name", "min_team_size", "max_team_size"}
	sportColumnsWithDefault    = []string{"id", "description", "created_at", "tx_hash"}
	sportPrimaryKeyColumns     = []string{"id"}
	sportGeneratedColumns      = []string{}
)

type (
	// SportSlice is an alias for a slice of pointers to Sport.
	// This should almost always be used instead of []Sport.
	SportSlice []*Sport
	// SportHook is the signature for custom Sport hook methods
	SportHook func(context.Context, boil.ContextExecutor, *Sport) error

	sportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sportType                 = reflect.TypeOf(&Sport{})
	sportMapping              = queries.MakeStructMapping(sportType)
	sportPrimaryKeyMapping, _ = queries.BindMapping(sportType, sportMapping, sportPrimaryKeyColumns)
	sportInsertCacheMut       sync.RWMutex
	sportInsertCache          = make(map[string]insertCache)
	sportUpdateCacheMut       sync.RWMutex
	sportUpdateCache          = make(map[string]updateCache)
	sportUpsertCacheMut       sync.RWMutex
	sportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sportAfterSelectMu sync.Mutex
var sportAfterSelectHooks []SportHook

var sportBeforeInsertMu sync.Mutex
var sportBeforeInsertHooks []SportHook
var sportAfterInsertMu sync.Mutex
var sportAfterInsertHooks []SportHook

var sportBeforeUpdateMu sync.Mutex
var sportBeforeUpdateHooks []SportHook
var sportAfterUpdateMu sync.Mutex
var sportAfterUpdateHooks []SportHook

var sportBeforeDeleteMu sync.Mutex
var sportBeforeDeleteHooks []SportHook
var sportAfterDeleteMu sync.Mutex
var sportAfterDeleteHooks []SportHook

var sportBeforeUpsertMu sync.Mutex
var sportBeforeUpsertHooks []SportHook
var sportAfterUpsertMu sync.Mutex
var sportAfterUpsertHooks []SportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSportHook registers your hook function for all future operations.
func AddSportHook(hookPoint boil.HookPoint, sportHook SportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sportAfterSelectMu.Lock()
		sportAfterSelectHooks = append(sportAfterSelectHooks, sportHook)
		sportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		sportBeforeInsertMu.Lock()
		sportBeforeInsertHooks = append(sportBeforeInsertHooks, sportHook)
		sportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		sportAfterInsertMu.Lock()
		sportAfterInsertHooks = append(sportAfterInsertHooks, sportHook)
		sportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		sportBeforeUpdateMu.Lock()
		sportBeforeUpdateHooks = append(sportBeforeUpdateHooks, sportHook)
		sportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		sportAfterUpdateMu.Lock()
		sportAfterUpdateHooks = append(sportAfterUpdateHooks, sportHook)
		sportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		sportBeforeDeleteMu.Lock()
		sportBeforeDeleteHooks = append(sportBeforeDeleteHooks, sportHook)
		sportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		sportAfterDeleteMu.Lock()
		sportAfterDeleteHooks = append(sportAfterDeleteHooks, sportHook)
		sportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		sportBeforeUpsertMu.Lock()
		sportBeforeUpsertHooks = append(sportBeforeUpsertHooks, sportHook)
		sportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		sportAfterUpsertMu.Lock()
		sportAfterUpsertHooks = append(sportAfterUpsertHooks, sportHook)
		sportAfterUpsertMu.Unlock()
	}
}

// One returns a single sport record from the query.
func (q sportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sport, error) {
	o := &Sport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for sport")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Sport records from the query.
func (q sportQuery) All(ctx context.Context, exec boil.ContextExecutor) (SportSlice, error) {
	var o []*Sport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Sport slice")
	}

	if len(sportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Sport records in the query.
func (q sportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count sport rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if sport exists")
	}

	return count > 0, nil
}

// Competitions retrieves all the competition's Competitions with an executor.
func (o *Sport) Competitions(mods ...qm.QueryMod) competitionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"competition\".\"sport_id\"=?", o.ID),
	)

	return Competitions(queryMods...)
}

// PersonSports retrieves all the person_sport's PersonSports with an executor.
func (o *Sport) PersonSports(mods ...qm.QueryMod) personSportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"person_sport\".\"sport_id\"=?", o.ID),
	)

	return PersonSports(queryMods...)
}

// LoadCompetitions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sportL) LoadCompetitions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSport interface{}, mods queries.Applicator) error {
	var slice []*Sport
	var object *Sport

	if singular {
		var ok bool
		object, ok = maybeSport.(*Sport)
		if !ok {
			object = new(Sport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSport))
			}
		}
	} else {
		s, ok := maybeSport.(*[]*Sport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition`),
		qm.WhereIn(`competition.sport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load competition")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice competition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on competition")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition")
	}

	if len(competitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Competitions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &competitionR{}
			}
			foreign.R.Sport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SportID {
				local.R.Competitions = append(local.R.Competitions, foreign)
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.Sport = local
				break
			}
		}
	}

	return nil
}

// LoadPersonSports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sportL) LoadPersonSports(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSport interface{}, mods queries.Applicator) error {
	var slice []*Sport
	var object *Sport

	if singular {
		var ok bool
		object, ok = maybeSport.(*Sport)
		if !ok {
			object = new(Sport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSport))
			}
		}
	} else {
		s, ok := maybeSport.(*[]*Sport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sportR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sportR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`person_sport`),
		qm.WhereIn(`person_sport.sport_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load person_sport")
	}

	var resultSlice []*PersonSport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice person_sport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on person_sport")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person_sport")
	}

	if len(personSportAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PersonSports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &personSportR{}
			}
			foreign.R.Sport = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SportID {
				local.R.PersonSports = append(local.R.PersonSports, foreign)
				if foreign.R == nil {
					foreign.R = &personSportR{}
				}
				foreign.R.Sport = local
				break
			}
		}
	}

	return nil
}

// AddCompetitions adds the given related objects to the existing relationships
// of the sport, optionally inserting them as new records.
// Appends related to o.R.Competitions.
// Sets related.R.Sport appropriately.
func (o *Sport) AddCompetitions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Competition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SportID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"competition\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
				strmangle.WhereClause("\"", "\"", 2, competitionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SportID = o.ID
		}
	}

	if o.R == nil {
		o.R = &sportR{
			Competitions: related,
		}
	} else {
		o.R.Competitions = append(o.R.Competitions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &competitionR{
				Sport: o,
			}
		} else {
			rel.R.Sport = o
		}
	}
	return nil
}

// AddPersonSports adds the given related objects to the existing relationships
// of the sport, optionally inserting them as new records.
// Appends related to o.R.PersonSports.
// Sets related.R.Sport appropriately.
func (o *Sport) AddPersonSports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PersonSport) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SportID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"person_sport\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sport_id"}),
				strmangle.WhereClause("\"", "\"", 2, personSportPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SportID = o.ID
		}
	}

	if o.R == nil {
		o.R = &sportR{
			PersonSports: related,
		}
	} else {
		o.R.PersonSports = append(o.R.PersonSports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &personSportR{
				Sport: o,
			}
		} else {
			rel.R.Sport = o
		}
	}
	return nil
}

// Sports retrieves all the records using an executor.
func Sports(mods ...qm.QueryMod) sportQuery {
	mods = append(mods, qm.From("\"sport\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sport\".*"})
	}

	return sportQuery{q}
}

// FindSport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSport(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Sport, error) {
	sportObj := &Sport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sport\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from sport")
	}

	if err = sportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sportObj, err
	}

	return sportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no sport provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sportInsertCacheMut.RLock()
	cache, cached := sportInsertCache[key]
	sportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sportAllColumns,
			sportColumnsWithDefault,
			sportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sportType, sportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sportType, sportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sport\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sport\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into sport")
	}

	if !cached {
		sportInsertCacheMut.Lock()
		sportInsertCache[key] = cache
		sportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Sport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sportUpdateCacheMut.RLock()
	cache, cached := sportUpdateCache[key]
	sportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sportAllColumns,
			sportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update sport, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sport\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sportType, sportMapping, append(wl, sportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update sport row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for sport")
	}

	if !cached {
		sportUpdateCacheMut.Lock()
		sportUpdateCache[key] = cache
		sportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for sport")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for sport")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sport\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in sport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all sport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no sport provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sportUpsertCacheMut.RLock()
	cache, cached := sportUpsertCache[key]
	sportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			sportAllColumns,
			sportColumnsWithDefault,
			sportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sportAllColumns,
			sportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert sport, could not build update column list")
		}

		ret := strmangle.SetComplement(sportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sportPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert sport, could not build conflict column list")
			}

			conflict = make([]string, len(sportPrimaryKeyColumns))
			copy(conflict, sportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sport\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(sportType, sportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sportType, sportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert sport")
	}

	if !cached {
		sportUpsertCacheMut.Lock()
		sportUpsertCache[key] = cache
		sportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Sport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Sport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sportPrimaryKeyMapping)
	sql := "DELETE FROM \"sport\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from sport")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for sport")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no sportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from sport")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for sport")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sport\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from sport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for sport")
	}

	if len(sportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sport\".* FROM \"sport\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in SportSlice")
	}

	*o = slice

	return nil
}

// SportExists checks if the Sport row exists.
func SportExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sport\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if sport exists")
	}

	return exists, nil
}

// Exists checks if the Sport row exists.
func (o *Sport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SportExists(ctx, exec, o.ID)
}
