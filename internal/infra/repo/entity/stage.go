// Code generated by SQLBoiler 4.19.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Stage is an object representing the database table.
type Stage struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompetitionID int64     `boil:"competition_id" json:"competition_id" toml:"competition_id" yaml:"competition_id"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	StartTime     time.Time `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime       null.Time `boil:"end_time" json:"end_time,omitempty" toml:"end_time" yaml:"end_time,omitempty"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *stageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StageColumns = struct {
	ID            string
	CompetitionID string
	Name          string
	StartTime     string
	EndTime       string
	CreatedAt     string
}{
	ID:            "id",
	CompetitionID: "competition_id",
	Name:          "name",
	StartTime:     "start_time",
	EndTime:       "end_time",
	CreatedAt:     "created_at",
}

var StageTableColumns = struct {
	ID            string
	CompetitionID string
	Name          string
	StartTime     string
	EndTime       string
	CreatedAt     string
}{
	ID:            "stage.id",
	CompetitionID: "stage.competition_id",
	Name:          "stage.name",
	StartTime:     "stage.start_time",
	EndTime:       "stage.end_time",
	CreatedAt:     "stage.created_at",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var StageWhere = struct {
	ID            whereHelperint64
	CompetitionID whereHelperint64
	Name          whereHelperstring
	StartTime     whereHelpertime_Time
	EndTime       whereHelpernull_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "\"stage\".\"id\""},
	CompetitionID: whereHelperint64{field: "\"stage\".\"competition_id\""},
	Name:          whereHelperstring{field: "\"stage\".\"name\""},
	StartTime:     whereHelpertime_Time{field: "\"stage\".\"start_time\""},
	EndTime:       whereHelpernull_Time{field: "\"stage\".\"end_time\""},
	CreatedAt:     whereHelpertime_Time{field: "\"stage\".\"created_at\""},
}

// StageRels is where relationship names are stored.
var StageRels = struct {
	Competition string
	Matches     string
}{
	Competition: "Competition",
	Matches:     "Matches",
}

// stageR is where relationships are stored.
type stageR struct {
	Competition *Competition `boil:"Competition" json:"Competition" toml:"Competition" yaml:"Competition"`
	Matches     MatchSlice   `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
}

// NewStruct creates a new relationship struct
func (*stageR) NewStruct() *stageR {
	return &stageR{}
}

func (o *Stage) GetCompetition() *Competition {
	if o == nil {
		return nil
	}

	return o.R.GetCompetition()
}

func (r *stageR) GetCompetition() *Competition {
	if r == nil {
		return nil
	}

	return r.Competition
}

func (o *Stage) GetMatches() MatchSlice {
	if o == nil {
		return nil
	}

	return o.R.GetMatches()
}

func (r *stageR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}

	return r.Matches
}

// stageL is where Load methods for each relationship are stored.
type stageL struct{}

var (
	stageAllColumns            = []string{"id", "competition_id", "name", "start_time", "end_time", "created_at"}
	stageColumnsWithoutDefault = []string{"competition_id", "name", "start_time"}
	stageColumnsWithDefault    = []string{"id", "end_time", "created_at"}
	stagePrimaryKeyColumns     = []string{"id"}
	stageGeneratedColumns      = []string{}
)

type (
	// StageSlice is an alias for a slice of pointers to Stage.
	// This should almost always be used instead of []Stage.
	StageSlice []*Stage
	// StageHook is the signature for custom Stage hook methods
	StageHook func(context.Context, boil.ContextExecutor, *Stage) error

	stageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stageType                 = reflect.TypeOf(&Stage{})
	stageMapping              = queries.MakeStructMapping(stageType)
	stagePrimaryKeyMapping, _ = queries.BindMapping(stageType, stageMapping, stagePrimaryKeyColumns)
	stageInsertCacheMut       sync.RWMutex
	stageInsertCache          = make(map[string]insertCache)
	stageUpdateCacheMut       sync.RWMutex
	stageUpdateCache          = make(map[string]updateCache)
	stageUpsertCacheMut       sync.RWMutex
	stageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stageAfterSelectMu sync.Mutex
var stageAfterSelectHooks []StageHook

var stageBeforeInsertMu sync.Mutex
var stageBeforeInsertHooks []StageHook
var stageAfterInsertMu sync.Mutex
var stageAfterInsertHooks []StageHook

var stageBeforeUpdateMu sync.Mutex
var stageBeforeUpdateHooks []StageHook
var stageAfterUpdateMu sync.Mutex
var stageAfterUpdateHooks []StageHook

var stageBeforeDeleteMu sync.Mutex
var stageBeforeDeleteHooks []StageHook
var stageAfterDeleteMu sync.Mutex
var stageAfterDeleteHooks []StageHook

var stageBeforeUpsertMu sync.Mutex
var stageBeforeUpsertHooks []StageHook
var stageAfterUpsertMu sync.Mutex
var stageAfterUpsertHooks []StageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Stage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Stage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Stage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Stage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Stage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Stage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Stage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Stage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Stage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStageHook registers your hook function for all future operations.
func AddStageHook(hookPoint boil.HookPoint, stageHook StageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stageAfterSelectMu.Lock()
		stageAfterSelectHooks = append(stageAfterSelectHooks, stageHook)
		stageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		stageBeforeInsertMu.Lock()
		stageBeforeInsertHooks = append(stageBeforeInsertHooks, stageHook)
		stageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		stageAfterInsertMu.Lock()
		stageAfterInsertHooks = append(stageAfterInsertHooks, stageHook)
		stageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		stageBeforeUpdateMu.Lock()
		stageBeforeUpdateHooks = append(stageBeforeUpdateHooks, stageHook)
		stageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		stageAfterUpdateMu.Lock()
		stageAfterUpdateHooks = append(stageAfterUpdateHooks, stageHook)
		stageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		stageBeforeDeleteMu.Lock()
		stageBeforeDeleteHooks = append(stageBeforeDeleteHooks, stageHook)
		stageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		stageAfterDeleteMu.Lock()
		stageAfterDeleteHooks = append(stageAfterDeleteHooks, stageHook)
		stageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		stageBeforeUpsertMu.Lock()
		stageBeforeUpsertHooks = append(stageBeforeUpsertHooks, stageHook)
		stageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		stageAfterUpsertMu.Lock()
		stageAfterUpsertHooks = append(stageAfterUpsertHooks, stageHook)
		stageAfterUpsertMu.Unlock()
	}
}

// One returns a single stage record from the query.
func (q stageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Stage, error) {
	o := &Stage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for stage")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Stage records from the query.
func (q stageQuery) All(ctx context.Context, exec boil.ContextExecutor) (StageSlice, error) {
	var o []*Stage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Stage slice")
	}

	if len(stageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Stage records in the query.
func (q stageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count stage rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if stage exists")
	}

	return count > 0, nil
}

// Competition pointed to by the foreign key.
func (o *Stage) Competition(mods ...qm.QueryMod) competitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompetitionID),
	}

	queryMods = append(queryMods, mods...)

	return Competitions(queryMods...)
}

// Matches retrieves all the match's Matches with an executor.
func (o *Stage) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match\".\"stage_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// LoadCompetition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stageL) LoadCompetition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStage interface{}, mods queries.Applicator) error {
	var slice []*Stage
	var object *Stage

	if singular {
		var ok bool
		object, ok = maybeStage.(*Stage)
		if !ok {
			object = new(Stage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStage))
			}
		}
	} else {
		s, ok := maybeStage.(*[]*Stage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &stageR{}
		}
		args[object.CompetitionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stageR{}
			}

			args[obj.CompetitionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competition`),
		qm.WhereIn(`competition.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Competition")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Competition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competition")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition")
	}

	if len(competitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Competition = foreign
		if foreign.R == nil {
			foreign.R = &competitionR{}
		}
		foreign.R.Stages = append(foreign.R.Stages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompetitionID == foreign.ID {
				local.R.Competition = foreign
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.Stages = append(foreign.R.Stages, local)
				break
			}
		}
	}

	return nil
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stageL) LoadMatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStage interface{}, mods queries.Applicator) error {
	var slice []*Stage
	var object *Stage

	if singular {
		var ok bool
		object, ok = maybeStage.(*Stage)
		if !ok {
			object = new(Stage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStage))
			}
		}
	} else {
		s, ok := maybeStage.(*[]*Stage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &stageR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stageR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match`),
		qm.WhereIn(`match.stage_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Stage = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StageID {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Stage = local
				break
			}
		}
	}

	return nil
}

// SetCompetition of the stage to the related item.
// Sets o.R.Competition to related.
// Adds o to related.R.Stages.
func (o *Stage) SetCompetition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Competition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stage\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"competition_id"}),
		strmangle.WhereClause("\"", "\"", 2, stagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompetitionID = related.ID
	if o.R == nil {
		o.R = &stageR{
			Competition: related,
		}
	} else {
		o.R.Competition = related
	}

	if related.R == nil {
		related.R = &competitionR{
			Stages: StageSlice{o},
		}
	} else {
		related.R.Stages = append(related.R.Stages, o)
	}

	return nil
}

// AddMatches adds the given related objects to the existing relationships
// of the stage, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Stage appropriately.
func (o *Stage) AddMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StageID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"stage_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StageID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stageR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Stage: o,
			}
		} else {
			rel.R.Stage = o
		}
	}
	return nil
}

// Stages retrieves all the records using an executor.
func Stages(mods ...qm.QueryMod) stageQuery {
	mods = append(mods, qm.From("\"stage\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"stage\".*"})
	}

	return stageQuery{q}
}

// FindStage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Stage, error) {
	stageObj := &Stage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stage\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from stage")
	}

	if err = stageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stageObj, err
	}

	return stageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Stage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no stage provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stageInsertCacheMut.RLock()
	cache, cached := stageInsertCache[key]
	stageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stageAllColumns,
			stageColumnsWithDefault,
			stageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stageType, stageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stageType, stageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stage\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stage\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into stage")
	}

	if !cached {
		stageInsertCacheMut.Lock()
		stageInsertCache[key] = cache
		stageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Stage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Stage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stageUpdateCacheMut.RLock()
	cache, cached := stageUpdateCache[key]
	stageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stageAllColumns,
			stagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update stage, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stage\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stageType, stageMapping, append(wl, stagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update stage row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for stage")
	}

	if !cached {
		stageUpdateCacheMut.Lock()
		stageUpdateCache[key] = cache
		stageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for stage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for stage")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stage\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in stage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all stage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Stage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no stage provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stageUpsertCacheMut.RLock()
	cache, cached := stageUpsertCache[key]
	stageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			stageAllColumns,
			stageColumnsWithDefault,
			stageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stageAllColumns,
			stagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert stage, could not build update column list")
		}

		ret := strmangle.SetComplement(stageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(stagePrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert stage, could not build conflict column list")
			}

			conflict = make([]string, len(stagePrimaryKeyColumns))
			copy(conflict, stagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stage\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(stageType, stageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stageType, stageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert stage")
	}

	if !cached {
		stageUpsertCacheMut.Lock()
		stageUpsertCache[key] = cache
		stageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Stage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Stage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Stage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stagePrimaryKeyMapping)
	sql := "DELETE FROM \"stage\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from stage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for stage")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no stageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from stage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for stage")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stage\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from stage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for stage")
	}

	if len(stageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Stage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stage\".* FROM \"stage\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in StageSlice")
	}

	*o = slice

	return nil
}

// StageExists checks if the Stage row exists.
func StageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stage\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if stage exists")
	}

	return exists, nil
}

// Exists checks if the Stage row exists.
func (o *Stage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StageExists(ctx, exec, o.ID)
}
