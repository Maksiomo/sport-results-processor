// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TeamPerson is an object representing the database table.
type TeamPerson struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeamID     int64       `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	PersonID   int64       `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	RoleID     int64       `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	JoinedAt   time.Time   `boil:"joined_at" json:"joined_at" toml:"joined_at" yaml:"joined_at"`
	LeftAt     null.Time   `boil:"left_at" json:"left_at,omitempty" toml:"left_at" yaml:"left_at,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	RecordHash null.Bytes  `boil:"record_hash" json:"record_hash,omitempty" toml:"record_hash" yaml:"record_hash,omitempty"`
	TXHash     null.String `boil:"tx_hash" json:"tx_hash,omitempty" toml:"tx_hash" yaml:"tx_hash,omitempty"`

	R *teamPersonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamPersonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamPersonColumns = struct {
	ID         string
	TeamID     string
	PersonID   string
	RoleID     string
	JoinedAt   string
	LeftAt     string
	CreatedAt  string
	RecordHash string
	TXHash     string
}{
	ID:         "id",
	TeamID:     "team_id",
	PersonID:   "person_id",
	RoleID:     "role_id",
	JoinedAt:   "joined_at",
	LeftAt:     "left_at",
	CreatedAt:  "created_at",
	RecordHash: "record_hash",
	TXHash:     "tx_hash",
}

var TeamPersonTableColumns = struct {
	ID         string
	TeamID     string
	PersonID   string
	RoleID     string
	JoinedAt   string
	LeftAt     string
	CreatedAt  string
	RecordHash string
	TXHash     string
}{
	ID:         "team_person.id",
	TeamID:     "team_person.team_id",
	PersonID:   "team_person.person_id",
	RoleID:     "team_person.role_id",
	JoinedAt:   "team_person.joined_at",
	LeftAt:     "team_person.left_at",
	CreatedAt:  "team_person.created_at",
	RecordHash: "team_person.record_hash",
	TXHash:     "team_person.tx_hash",
}

// Generated where

var TeamPersonWhere = struct {
	ID         whereHelperint64
	TeamID     whereHelperint64
	PersonID   whereHelperint64
	RoleID     whereHelperint64
	JoinedAt   whereHelpertime_Time
	LeftAt     whereHelpernull_Time
	CreatedAt  whereHelpertime_Time
	RecordHash whereHelpernull_Bytes
	TXHash     whereHelpernull_String
}{
	ID:         whereHelperint64{field: "\"team_person\".\"id\""},
	TeamID:     whereHelperint64{field: "\"team_person\".\"team_id\""},
	PersonID:   whereHelperint64{field: "\"team_person\".\"person_id\""},
	RoleID:     whereHelperint64{field: "\"team_person\".\"role_id\""},
	JoinedAt:   whereHelpertime_Time{field: "\"team_person\".\"joined_at\""},
	LeftAt:     whereHelpernull_Time{field: "\"team_person\".\"left_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"team_person\".\"created_at\""},
	RecordHash: whereHelpernull_Bytes{field: "\"team_person\".\"record_hash\""},
	TXHash:     whereHelpernull_String{field: "\"team_person\".\"tx_hash\""},
}

// TeamPersonRels is where relationship names are stored.
var TeamPersonRels = struct {
	Person string
	Role   string
	Team   string
}{
	Person: "Person",
	Role:   "Role",
	Team:   "Team",
}

// teamPersonR is where relationships are stored.
type teamPersonR struct {
	Person *Person `boil:"Person" json:"Person" toml:"Person" yaml:"Person"`
	Role   *Role   `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
	Team   *Team   `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*teamPersonR) NewStruct() *teamPersonR {
	return &teamPersonR{}
}

func (r *teamPersonR) GetPerson() *Person {
	if r == nil {
		return nil
	}
	return r.Person
}

func (r *teamPersonR) GetRole() *Role {
	if r == nil {
		return nil
	}
	return r.Role
}

func (r *teamPersonR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

// teamPersonL is where Load methods for each relationship are stored.
type teamPersonL struct{}

var (
	teamPersonAllColumns            = []string{"id", "team_id", "person_id", "role_id", "joined_at", "left_at", "created_at", "record_hash", "tx_hash"}
	teamPersonColumnsWithoutDefault = []string{"team_id", "person_id", "role_id"}
	teamPersonColumnsWithDefault    = []string{"id", "joined_at", "left_at", "created_at", "record_hash", "tx_hash"}
	teamPersonPrimaryKeyColumns     = []string{"id"}
	teamPersonGeneratedColumns      = []string{}
)

type (
	// TeamPersonSlice is an alias for a slice of pointers to TeamPerson.
	// This should almost always be used instead of []TeamPerson.
	TeamPersonSlice []*TeamPerson
	// TeamPersonHook is the signature for custom TeamPerson hook methods
	TeamPersonHook func(context.Context, boil.ContextExecutor, *TeamPerson) error

	teamPersonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamPersonType                 = reflect.TypeOf(&TeamPerson{})
	teamPersonMapping              = queries.MakeStructMapping(teamPersonType)
	teamPersonPrimaryKeyMapping, _ = queries.BindMapping(teamPersonType, teamPersonMapping, teamPersonPrimaryKeyColumns)
	teamPersonInsertCacheMut       sync.RWMutex
	teamPersonInsertCache          = make(map[string]insertCache)
	teamPersonUpdateCacheMut       sync.RWMutex
	teamPersonUpdateCache          = make(map[string]updateCache)
	teamPersonUpsertCacheMut       sync.RWMutex
	teamPersonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamPersonAfterSelectMu sync.Mutex
var teamPersonAfterSelectHooks []TeamPersonHook

var teamPersonBeforeInsertMu sync.Mutex
var teamPersonBeforeInsertHooks []TeamPersonHook
var teamPersonAfterInsertMu sync.Mutex
var teamPersonAfterInsertHooks []TeamPersonHook

var teamPersonBeforeUpdateMu sync.Mutex
var teamPersonBeforeUpdateHooks []TeamPersonHook
var teamPersonAfterUpdateMu sync.Mutex
var teamPersonAfterUpdateHooks []TeamPersonHook

var teamPersonBeforeDeleteMu sync.Mutex
var teamPersonBeforeDeleteHooks []TeamPersonHook
var teamPersonAfterDeleteMu sync.Mutex
var teamPersonAfterDeleteHooks []TeamPersonHook

var teamPersonBeforeUpsertMu sync.Mutex
var teamPersonBeforeUpsertHooks []TeamPersonHook
var teamPersonAfterUpsertMu sync.Mutex
var teamPersonAfterUpsertHooks []TeamPersonHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TeamPerson) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TeamPerson) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TeamPerson) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TeamPerson) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TeamPerson) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TeamPerson) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TeamPerson) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TeamPerson) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TeamPerson) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPersonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamPersonHook registers your hook function for all future operations.
func AddTeamPersonHook(hookPoint boil.HookPoint, teamPersonHook TeamPersonHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		teamPersonAfterSelectMu.Lock()
		teamPersonAfterSelectHooks = append(teamPersonAfterSelectHooks, teamPersonHook)
		teamPersonAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		teamPersonBeforeInsertMu.Lock()
		teamPersonBeforeInsertHooks = append(teamPersonBeforeInsertHooks, teamPersonHook)
		teamPersonBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		teamPersonAfterInsertMu.Lock()
		teamPersonAfterInsertHooks = append(teamPersonAfterInsertHooks, teamPersonHook)
		teamPersonAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		teamPersonBeforeUpdateMu.Lock()
		teamPersonBeforeUpdateHooks = append(teamPersonBeforeUpdateHooks, teamPersonHook)
		teamPersonBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		teamPersonAfterUpdateMu.Lock()
		teamPersonAfterUpdateHooks = append(teamPersonAfterUpdateHooks, teamPersonHook)
		teamPersonAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		teamPersonBeforeDeleteMu.Lock()
		teamPersonBeforeDeleteHooks = append(teamPersonBeforeDeleteHooks, teamPersonHook)
		teamPersonBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		teamPersonAfterDeleteMu.Lock()
		teamPersonAfterDeleteHooks = append(teamPersonAfterDeleteHooks, teamPersonHook)
		teamPersonAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		teamPersonBeforeUpsertMu.Lock()
		teamPersonBeforeUpsertHooks = append(teamPersonBeforeUpsertHooks, teamPersonHook)
		teamPersonBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		teamPersonAfterUpsertMu.Lock()
		teamPersonAfterUpsertHooks = append(teamPersonAfterUpsertHooks, teamPersonHook)
		teamPersonAfterUpsertMu.Unlock()
	}
}

// One returns a single teamPerson record from the query.
func (q teamPersonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TeamPerson, error) {
	o := &TeamPerson{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for team_person")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TeamPerson records from the query.
func (q teamPersonQuery) All(ctx context.Context, exec boil.ContextExecutor) (TeamPersonSlice, error) {
	var o []*TeamPerson

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to TeamPerson slice")
	}

	if len(teamPersonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TeamPerson records in the query.
func (q teamPersonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count team_person rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamPersonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if team_person exists")
	}

	return count > 0, nil
}

// Person pointed to by the foreign key.
func (o *TeamPerson) Person(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PersonID),
	}

	queryMods = append(queryMods, mods...)

	return People(queryMods...)
}

// Role pointed to by the foreign key.
func (o *TeamPerson) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// Team pointed to by the foreign key.
func (o *TeamPerson) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// LoadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamPersonL) LoadPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamPerson interface{}, mods queries.Applicator) error {
	var slice []*TeamPerson
	var object *TeamPerson

	if singular {
		var ok bool
		object, ok = maybeTeamPerson.(*TeamPerson)
		if !ok {
			object = new(TeamPerson)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeamPerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeamPerson))
			}
		}
	} else {
		s, ok := maybeTeamPerson.(*[]*TeamPerson)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeamPerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeamPerson))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamPersonR{}
		}
		args[object.PersonID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamPersonR{}
			}

			args[obj.PersonID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`person`),
		qm.WhereIn(`person.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for person")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Person = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.TeamPeople = append(foreign.R.TeamPeople, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonID == foreign.ID {
				local.R.Person = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.TeamPeople = append(foreign.R.TeamPeople, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamPersonL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamPerson interface{}, mods queries.Applicator) error {
	var slice []*TeamPerson
	var object *TeamPerson

	if singular {
		var ok bool
		object, ok = maybeTeamPerson.(*TeamPerson)
		if !ok {
			object = new(TeamPerson)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeamPerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeamPerson))
			}
		}
	} else {
		s, ok := maybeTeamPerson.(*[]*TeamPerson)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeamPerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeamPerson))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamPersonR{}
		}
		args[object.RoleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamPersonR{}
			}

			args[obj.RoleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`role`),
		qm.WhereIn(`role.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for role")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.TeamPeople = append(foreign.R.TeamPeople, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.TeamPeople = append(foreign.R.TeamPeople, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamPersonL) LoadTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamPerson interface{}, mods queries.Applicator) error {
	var slice []*TeamPerson
	var object *TeamPerson

	if singular {
		var ok bool
		object, ok = maybeTeamPerson.(*TeamPerson)
		if !ok {
			object = new(TeamPerson)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeamPerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeamPerson))
			}
		}
	} else {
		s, ok := maybeTeamPerson.(*[]*TeamPerson)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeamPerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeamPerson))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamPersonR{}
		}
		args[object.TeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamPersonR{}
			}

			args[obj.TeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`team`),
		qm.WhereIn(`team.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for team")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.TeamPeople = append(foreign.R.TeamPeople, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.ID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.TeamPeople = append(foreign.R.TeamPeople, local)
				break
			}
		}
	}

	return nil
}

// SetPerson of the teamPerson to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.TeamPeople.
func (o *TeamPerson) SetPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"team_person\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPersonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonID = related.ID
	if o.R == nil {
		o.R = &teamPersonR{
			Person: related,
		}
	} else {
		o.R.Person = related
	}

	if related.R == nil {
		related.R = &personR{
			TeamPeople: TeamPersonSlice{o},
		}
	} else {
		related.R.TeamPeople = append(related.R.TeamPeople, o)
	}

	return nil
}

// SetRole of the teamPerson to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.TeamPeople.
func (o *TeamPerson) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"team_person\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPersonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &teamPersonR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			TeamPeople: TeamPersonSlice{o},
		}
	} else {
		related.R.TeamPeople = append(related.R.TeamPeople, o)
	}

	return nil
}

// SetTeam of the teamPerson to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.TeamPeople.
func (o *TeamPerson) SetTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"team_person\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPersonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.ID
	if o.R == nil {
		o.R = &teamPersonR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			TeamPeople: TeamPersonSlice{o},
		}
	} else {
		related.R.TeamPeople = append(related.R.TeamPeople, o)
	}

	return nil
}

// TeamPeople retrieves all the records using an executor.
func TeamPeople(mods ...qm.QueryMod) teamPersonQuery {
	mods = append(mods, qm.From("\"team_person\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"team_person\".*"})
	}

	return teamPersonQuery{q}
}

// FindTeamPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamPerson(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TeamPerson, error) {
	teamPersonObj := &TeamPerson{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"team_person\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, teamPersonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from team_person")
	}

	if err = teamPersonObj.doAfterSelectHooks(ctx, exec); err != nil {
		return teamPersonObj, err
	}

	return teamPersonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamPerson) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no team_person provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamPersonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamPersonInsertCacheMut.RLock()
	cache, cached := teamPersonInsertCache[key]
	teamPersonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamPersonAllColumns,
			teamPersonColumnsWithDefault,
			teamPersonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamPersonType, teamPersonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamPersonType, teamPersonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"team_person\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"team_person\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into team_person")
	}

	if !cached {
		teamPersonInsertCacheMut.Lock()
		teamPersonInsertCache[key] = cache
		teamPersonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TeamPerson.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamPerson) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamPersonUpdateCacheMut.RLock()
	cache, cached := teamPersonUpdateCache[key]
	teamPersonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamPersonAllColumns,
			teamPersonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update team_person, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"team_person\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamPersonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamPersonType, teamPersonMapping, append(wl, teamPersonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update team_person row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for team_person")
	}

	if !cached {
		teamPersonUpdateCacheMut.Lock()
		teamPersonUpdateCache[key] = cache
		teamPersonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamPersonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for team_person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for team_person")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamPersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"team_person\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamPersonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in teamPerson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all teamPerson")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamPerson) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no team_person provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamPersonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamPersonUpsertCacheMut.RLock()
	cache, cached := teamPersonUpsertCache[key]
	teamPersonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			teamPersonAllColumns,
			teamPersonColumnsWithDefault,
			teamPersonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			teamPersonAllColumns,
			teamPersonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert team_person, could not build update column list")
		}

		ret := strmangle.SetComplement(teamPersonAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(teamPersonPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert team_person, could not build conflict column list")
			}

			conflict = make([]string, len(teamPersonPrimaryKeyColumns))
			copy(conflict, teamPersonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"team_person\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(teamPersonType, teamPersonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamPersonType, teamPersonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert team_person")
	}

	if !cached {
		teamPersonUpsertCacheMut.Lock()
		teamPersonUpsertCache[key] = cache
		teamPersonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TeamPerson record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamPerson) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no TeamPerson provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamPersonPrimaryKeyMapping)
	sql := "DELETE FROM \"team_person\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from team_person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for team_person")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamPersonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no teamPersonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from team_person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for team_person")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamPersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamPersonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"team_person\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPersonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from teamPerson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for team_person")
	}

	if len(teamPersonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamPerson) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTeamPerson(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamPersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamPersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"team_person\".* FROM \"team_person\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPersonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in TeamPersonSlice")
	}

	*o = slice

	return nil
}

// TeamPersonExists checks if the TeamPerson row exists.
func TeamPersonExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"team_person\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if team_person exists")
	}

	return exists, nil
}

// Exists checks if the TeamPerson row exists.
func (o *TeamPerson) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TeamPersonExists(ctx, exec, o.ID)
}
