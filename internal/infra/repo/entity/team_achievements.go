// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TeamAchievement is an object representing the database table.
type TeamAchievement struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeamID     int64       `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	PrizeID    int64       `boil:"prize_id" json:"prize_id" toml:"prize_id" yaml:"prize_id"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	RecordHash null.Bytes  `boil:"record_hash" json:"record_hash,omitempty" toml:"record_hash" yaml:"record_hash,omitempty"`
	TXHash     null.String `boil:"tx_hash" json:"tx_hash,omitempty" toml:"tx_hash" yaml:"tx_hash,omitempty"`

	R *teamAchievementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamAchievementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamAchievementColumns = struct {
	ID         string
	TeamID     string
	PrizeID    string
	CreatedAt  string
	RecordHash string
	TXHash     string
}{
	ID:         "id",
	TeamID:     "team_id",
	PrizeID:    "prize_id",
	CreatedAt:  "created_at",
	RecordHash: "record_hash",
	TXHash:     "tx_hash",
}

var TeamAchievementTableColumns = struct {
	ID         string
	TeamID     string
	PrizeID    string
	CreatedAt  string
	RecordHash string
	TXHash     string
}{
	ID:         "team_achievements.id",
	TeamID:     "team_achievements.team_id",
	PrizeID:    "team_achievements.prize_id",
	CreatedAt:  "team_achievements.created_at",
	RecordHash: "team_achievements.record_hash",
	TXHash:     "team_achievements.tx_hash",
}

// Generated where

var TeamAchievementWhere = struct {
	ID         whereHelperint64
	TeamID     whereHelperint64
	PrizeID    whereHelperint64
	CreatedAt  whereHelpertime_Time
	RecordHash whereHelpernull_Bytes
	TXHash     whereHelpernull_String
}{
	ID:         whereHelperint64{field: "\"team_achievements\".\"id\""},
	TeamID:     whereHelperint64{field: "\"team_achievements\".\"team_id\""},
	PrizeID:    whereHelperint64{field: "\"team_achievements\".\"prize_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"team_achievements\".\"created_at\""},
	RecordHash: whereHelpernull_Bytes{field: "\"team_achievements\".\"record_hash\""},
	TXHash:     whereHelpernull_String{field: "\"team_achievements\".\"tx_hash\""},
}

// TeamAchievementRels is where relationship names are stored.
var TeamAchievementRels = struct {
	Prize string
	Team  string
}{
	Prize: "Prize",
	Team:  "Team",
}

// teamAchievementR is where relationships are stored.
type teamAchievementR struct {
	Prize *Prize `boil:"Prize" json:"Prize" toml:"Prize" yaml:"Prize"`
	Team  *Team  `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*teamAchievementR) NewStruct() *teamAchievementR {
	return &teamAchievementR{}
}

func (r *teamAchievementR) GetPrize() *Prize {
	if r == nil {
		return nil
	}
	return r.Prize
}

func (r *teamAchievementR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

// teamAchievementL is where Load methods for each relationship are stored.
type teamAchievementL struct{}

var (
	teamAchievementAllColumns            = []string{"id", "team_id", "prize_id", "created_at", "record_hash", "tx_hash"}
	teamAchievementColumnsWithoutDefault = []string{"team_id", "prize_id"}
	teamAchievementColumnsWithDefault    = []string{"id", "created_at", "record_hash", "tx_hash"}
	teamAchievementPrimaryKeyColumns     = []string{"id"}
	teamAchievementGeneratedColumns      = []string{}
)

type (
	// TeamAchievementSlice is an alias for a slice of pointers to TeamAchievement.
	// This should almost always be used instead of []TeamAchievement.
	TeamAchievementSlice []*TeamAchievement
	// TeamAchievementHook is the signature for custom TeamAchievement hook methods
	TeamAchievementHook func(context.Context, boil.ContextExecutor, *TeamAchievement) error

	teamAchievementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamAchievementType                 = reflect.TypeOf(&TeamAchievement{})
	teamAchievementMapping              = queries.MakeStructMapping(teamAchievementType)
	teamAchievementPrimaryKeyMapping, _ = queries.BindMapping(teamAchievementType, teamAchievementMapping, teamAchievementPrimaryKeyColumns)
	teamAchievementInsertCacheMut       sync.RWMutex
	teamAchievementInsertCache          = make(map[string]insertCache)
	teamAchievementUpdateCacheMut       sync.RWMutex
	teamAchievementUpdateCache          = make(map[string]updateCache)
	teamAchievementUpsertCacheMut       sync.RWMutex
	teamAchievementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamAchievementAfterSelectMu sync.Mutex
var teamAchievementAfterSelectHooks []TeamAchievementHook

var teamAchievementBeforeInsertMu sync.Mutex
var teamAchievementBeforeInsertHooks []TeamAchievementHook
var teamAchievementAfterInsertMu sync.Mutex
var teamAchievementAfterInsertHooks []TeamAchievementHook

var teamAchievementBeforeUpdateMu sync.Mutex
var teamAchievementBeforeUpdateHooks []TeamAchievementHook
var teamAchievementAfterUpdateMu sync.Mutex
var teamAchievementAfterUpdateHooks []TeamAchievementHook

var teamAchievementBeforeDeleteMu sync.Mutex
var teamAchievementBeforeDeleteHooks []TeamAchievementHook
var teamAchievementAfterDeleteMu sync.Mutex
var teamAchievementAfterDeleteHooks []TeamAchievementHook

var teamAchievementBeforeUpsertMu sync.Mutex
var teamAchievementBeforeUpsertHooks []TeamAchievementHook
var teamAchievementAfterUpsertMu sync.Mutex
var teamAchievementAfterUpsertHooks []TeamAchievementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TeamAchievement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TeamAchievement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TeamAchievement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TeamAchievement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TeamAchievement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TeamAchievement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TeamAchievement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TeamAchievement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TeamAchievement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAchievementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamAchievementHook registers your hook function for all future operations.
func AddTeamAchievementHook(hookPoint boil.HookPoint, teamAchievementHook TeamAchievementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		teamAchievementAfterSelectMu.Lock()
		teamAchievementAfterSelectHooks = append(teamAchievementAfterSelectHooks, teamAchievementHook)
		teamAchievementAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		teamAchievementBeforeInsertMu.Lock()
		teamAchievementBeforeInsertHooks = append(teamAchievementBeforeInsertHooks, teamAchievementHook)
		teamAchievementBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		teamAchievementAfterInsertMu.Lock()
		teamAchievementAfterInsertHooks = append(teamAchievementAfterInsertHooks, teamAchievementHook)
		teamAchievementAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		teamAchievementBeforeUpdateMu.Lock()
		teamAchievementBeforeUpdateHooks = append(teamAchievementBeforeUpdateHooks, teamAchievementHook)
		teamAchievementBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		teamAchievementAfterUpdateMu.Lock()
		teamAchievementAfterUpdateHooks = append(teamAchievementAfterUpdateHooks, teamAchievementHook)
		teamAchievementAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		teamAchievementBeforeDeleteMu.Lock()
		teamAchievementBeforeDeleteHooks = append(teamAchievementBeforeDeleteHooks, teamAchievementHook)
		teamAchievementBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		teamAchievementAfterDeleteMu.Lock()
		teamAchievementAfterDeleteHooks = append(teamAchievementAfterDeleteHooks, teamAchievementHook)
		teamAchievementAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		teamAchievementBeforeUpsertMu.Lock()
		teamAchievementBeforeUpsertHooks = append(teamAchievementBeforeUpsertHooks, teamAchievementHook)
		teamAchievementBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		teamAchievementAfterUpsertMu.Lock()
		teamAchievementAfterUpsertHooks = append(teamAchievementAfterUpsertHooks, teamAchievementHook)
		teamAchievementAfterUpsertMu.Unlock()
	}
}

// One returns a single teamAchievement record from the query.
func (q teamAchievementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TeamAchievement, error) {
	o := &TeamAchievement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for team_achievements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TeamAchievement records from the query.
func (q teamAchievementQuery) All(ctx context.Context, exec boil.ContextExecutor) (TeamAchievementSlice, error) {
	var o []*TeamAchievement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to TeamAchievement slice")
	}

	if len(teamAchievementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TeamAchievement records in the query.
func (q teamAchievementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count team_achievements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamAchievementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if team_achievements exists")
	}

	return count > 0, nil
}

// Prize pointed to by the foreign key.
func (o *TeamAchievement) Prize(mods ...qm.QueryMod) prizeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PrizeID),
	}

	queryMods = append(queryMods, mods...)

	return Prizes(queryMods...)
}

// Team pointed to by the foreign key.
func (o *TeamAchievement) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// LoadPrize allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamAchievementL) LoadPrize(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamAchievement interface{}, mods queries.Applicator) error {
	var slice []*TeamAchievement
	var object *TeamAchievement

	if singular {
		var ok bool
		object, ok = maybeTeamAchievement.(*TeamAchievement)
		if !ok {
			object = new(TeamAchievement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeamAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeamAchievement))
			}
		}
	} else {
		s, ok := maybeTeamAchievement.(*[]*TeamAchievement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeamAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeamAchievement))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamAchievementR{}
		}
		args[object.PrizeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamAchievementR{}
			}

			args[obj.PrizeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`prize`),
		qm.WhereIn(`prize.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Prize")
	}

	var resultSlice []*Prize
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Prize")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for prize")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for prize")
	}

	if len(prizeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Prize = foreign
		if foreign.R == nil {
			foreign.R = &prizeR{}
		}
		foreign.R.TeamAchievements = append(foreign.R.TeamAchievements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PrizeID == foreign.ID {
				local.R.Prize = foreign
				if foreign.R == nil {
					foreign.R = &prizeR{}
				}
				foreign.R.TeamAchievements = append(foreign.R.TeamAchievements, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamAchievementL) LoadTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamAchievement interface{}, mods queries.Applicator) error {
	var slice []*TeamAchievement
	var object *TeamAchievement

	if singular {
		var ok bool
		object, ok = maybeTeamAchievement.(*TeamAchievement)
		if !ok {
			object = new(TeamAchievement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeamAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeamAchievement))
			}
		}
	} else {
		s, ok := maybeTeamAchievement.(*[]*TeamAchievement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeamAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeamAchievement))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamAchievementR{}
		}
		args[object.TeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamAchievementR{}
			}

			args[obj.TeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`team`),
		qm.WhereIn(`team.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for team")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.TeamAchievements = append(foreign.R.TeamAchievements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.ID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.TeamAchievements = append(foreign.R.TeamAchievements, local)
				break
			}
		}
	}

	return nil
}

// SetPrize of the teamAchievement to the related item.
// Sets o.R.Prize to related.
// Adds o to related.R.TeamAchievements.
func (o *TeamAchievement) SetPrize(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Prize) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"team_achievements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"prize_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamAchievementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PrizeID = related.ID
	if o.R == nil {
		o.R = &teamAchievementR{
			Prize: related,
		}
	} else {
		o.R.Prize = related
	}

	if related.R == nil {
		related.R = &prizeR{
			TeamAchievements: TeamAchievementSlice{o},
		}
	} else {
		related.R.TeamAchievements = append(related.R.TeamAchievements, o)
	}

	return nil
}

// SetTeam of the teamAchievement to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.TeamAchievements.
func (o *TeamAchievement) SetTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"team_achievements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamAchievementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.ID
	if o.R == nil {
		o.R = &teamAchievementR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			TeamAchievements: TeamAchievementSlice{o},
		}
	} else {
		related.R.TeamAchievements = append(related.R.TeamAchievements, o)
	}

	return nil
}

// TeamAchievements retrieves all the records using an executor.
func TeamAchievements(mods ...qm.QueryMod) teamAchievementQuery {
	mods = append(mods, qm.From("\"team_achievements\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"team_achievements\".*"})
	}

	return teamAchievementQuery{q}
}

// FindTeamAchievement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamAchievement(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TeamAchievement, error) {
	teamAchievementObj := &TeamAchievement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"team_achievements\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, teamAchievementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from team_achievements")
	}

	if err = teamAchievementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return teamAchievementObj, err
	}

	return teamAchievementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamAchievement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no team_achievements provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamAchievementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamAchievementInsertCacheMut.RLock()
	cache, cached := teamAchievementInsertCache[key]
	teamAchievementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamAchievementAllColumns,
			teamAchievementColumnsWithDefault,
			teamAchievementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamAchievementType, teamAchievementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamAchievementType, teamAchievementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"team_achievements\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"team_achievements\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into team_achievements")
	}

	if !cached {
		teamAchievementInsertCacheMut.Lock()
		teamAchievementInsertCache[key] = cache
		teamAchievementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TeamAchievement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamAchievement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamAchievementUpdateCacheMut.RLock()
	cache, cached := teamAchievementUpdateCache[key]
	teamAchievementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamAchievementAllColumns,
			teamAchievementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update team_achievements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"team_achievements\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamAchievementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamAchievementType, teamAchievementMapping, append(wl, teamAchievementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update team_achievements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for team_achievements")
	}

	if !cached {
		teamAchievementUpdateCacheMut.Lock()
		teamAchievementUpdateCache[key] = cache
		teamAchievementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamAchievementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for team_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for team_achievements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamAchievementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"team_achievements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamAchievementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in teamAchievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all teamAchievement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamAchievement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no team_achievements provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamAchievementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamAchievementUpsertCacheMut.RLock()
	cache, cached := teamAchievementUpsertCache[key]
	teamAchievementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			teamAchievementAllColumns,
			teamAchievementColumnsWithDefault,
			teamAchievementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			teamAchievementAllColumns,
			teamAchievementPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert team_achievements, could not build update column list")
		}

		ret := strmangle.SetComplement(teamAchievementAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(teamAchievementPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert team_achievements, could not build conflict column list")
			}

			conflict = make([]string, len(teamAchievementPrimaryKeyColumns))
			copy(conflict, teamAchievementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"team_achievements\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(teamAchievementType, teamAchievementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamAchievementType, teamAchievementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert team_achievements")
	}

	if !cached {
		teamAchievementUpsertCacheMut.Lock()
		teamAchievementUpsertCache[key] = cache
		teamAchievementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TeamAchievement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamAchievement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no TeamAchievement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamAchievementPrimaryKeyMapping)
	sql := "DELETE FROM \"team_achievements\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from team_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for team_achievements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamAchievementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no teamAchievementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from team_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for team_achievements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamAchievementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamAchievementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"team_achievements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamAchievementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from teamAchievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for team_achievements")
	}

	if len(teamAchievementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamAchievement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTeamAchievement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamAchievementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamAchievementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"team_achievements\".* FROM \"team_achievements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamAchievementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in TeamAchievementSlice")
	}

	*o = slice

	return nil
}

// TeamAchievementExists checks if the TeamAchievement row exists.
func TeamAchievementExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"team_achievements\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if team_achievements exists")
	}

	return exists, nil
}

// Exists checks if the TeamAchievement row exists.
func (o *TeamAchievement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TeamAchievementExists(ctx, exec, o.ID)
}
