//go:build go1.22

// Package registry provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package registry

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Список уровней соревнований
	// (GET /competition-levels)
	GetCompetitionLevels(w http.ResponseWriter, r *http.Request)
	// Создать новый уровень соревнований
	// (POST /competition-levels)
	PostCompetitionLevels(w http.ResponseWriter, r *http.Request)
	// Список участников соревнований
	// (GET /competition-teams)
	GetCompetitionTeams(w http.ResponseWriter, r *http.Request)
	// Добавить команду в соревнование
	// (POST /competition-teams)
	PostCompetitionTeams(w http.ResponseWriter, r *http.Request)
	// Список соревнований
	// (GET /competitions)
	GetCompetitions(w http.ResponseWriter, r *http.Request)
	// Создать соревнование
	// (POST /competitions)
	PostCompetitions(w http.ResponseWriter, r *http.Request)
	// Список стран
	// (GET /countries)
	GetCountries(w http.ResponseWriter, r *http.Request)
	// Создать новую страну
	// (POST /countries)
	PostCountries(w http.ResponseWriter, r *http.Request)
	// Список языков
	// (GET /languages)
	GetLanguages(w http.ResponseWriter, r *http.Request)
	// Создать новый язык
	// (POST /languages)
	PostLanguages(w http.ResponseWriter, r *http.Request)
	// Список локаций
	// (GET /locations)
	GetLocations(w http.ResponseWriter, r *http.Request)
	// Создать новую локацию
	// (POST /locations)
	PostLocations(w http.ResponseWriter, r *http.Request)
	// Список участников матча
	// (GET /match-participants)
	GetMatchParticipants(w http.ResponseWriter, r *http.Request)
	// Добавить участника в матч
	// (POST /match-participants)
	PostMatchParticipants(w http.ResponseWriter, r *http.Request)
	// Список матчей
	// (GET /matches)
	GetMatches(w http.ResponseWriter, r *http.Request)
	// Создать матч
	// (POST /matches)
	PostMatches(w http.ResponseWriter, r *http.Request)
	// Список участников (person)
	// (GET /persons)
	GetPersons(w http.ResponseWriter, r *http.Request)
	// Создать участника
	// (POST /persons)
	PostPersons(w http.ResponseWriter, r *http.Request)
	// Список призов
	// (GET /prizes)
	GetPrizes(w http.ResponseWriter, r *http.Request)
	// Создать приз
	// (POST /prizes)
	PostPrizes(w http.ResponseWriter, r *http.Request)
	// Список ролей
	// (GET /roles)
	GetRoles(w http.ResponseWriter, r *http.Request)
	// Создать новую роль
	// (POST /roles)
	PostRoles(w http.ResponseWriter, r *http.Request)
	// Список видов спорта
	// (GET /sports)
	GetSports(w http.ResponseWriter, r *http.Request)
	// Создать новый вид спорта
	// (POST /sports)
	PostSports(w http.ResponseWriter, r *http.Request)
	// Получить вид спорта по ID
	// (GET /sports/{id})
	GetSportsId(w http.ResponseWriter, r *http.Request, id int64)
	// Список этапов
	// (GET /stages)
	GetStages(w http.ResponseWriter, r *http.Request)
	// Создать этап
	// (POST /stages)
	PostStages(w http.ResponseWriter, r *http.Request)
	// Список достижений команд
	// (GET /team-achievements)
	GetTeamAchievements(w http.ResponseWriter, r *http.Request)
	// Добавить достижение команде
	// (POST /team-achievements)
	PostTeamAchievements(w http.ResponseWriter, r *http.Request)
	// Список команд
	// (GET /teams)
	GetTeams(w http.ResponseWriter, r *http.Request)
	// Создать команду
	// (POST /teams)
	PostTeams(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCompetitionLevels operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitionLevels(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitionLevels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostCompetitionLevels operation middleware
func (siw *ServerInterfaceWrapper) PostCompetitionLevels(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompetitionLevels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCompetitionTeams operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitionTeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitionTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostCompetitionTeams operation middleware
func (siw *ServerInterfaceWrapper) PostCompetitionTeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompetitionTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCompetitions operation middleware
func (siw *ServerInterfaceWrapper) GetCompetitions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompetitions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostCompetitions operation middleware
func (siw *ServerInterfaceWrapper) PostCompetitions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompetitions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCountries operation middleware
func (siw *ServerInterfaceWrapper) GetCountries(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCountries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostCountries operation middleware
func (siw *ServerInterfaceWrapper) PostCountries(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCountries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLanguages operation middleware
func (siw *ServerInterfaceWrapper) GetLanguages(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLanguages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLanguages operation middleware
func (siw *ServerInterfaceWrapper) PostLanguages(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLanguages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLocations operation middleware
func (siw *ServerInterfaceWrapper) GetLocations(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLocations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLocations operation middleware
func (siw *ServerInterfaceWrapper) PostLocations(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLocations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMatchParticipants operation middleware
func (siw *ServerInterfaceWrapper) GetMatchParticipants(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMatchParticipants(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostMatchParticipants operation middleware
func (siw *ServerInterfaceWrapper) PostMatchParticipants(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMatchParticipants(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMatches operation middleware
func (siw *ServerInterfaceWrapper) GetMatches(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMatches(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostMatches operation middleware
func (siw *ServerInterfaceWrapper) PostMatches(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMatches(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPersons operation middleware
func (siw *ServerInterfaceWrapper) GetPersons(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPersons(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPersons operation middleware
func (siw *ServerInterfaceWrapper) PostPersons(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPersons(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPrizes operation middleware
func (siw *ServerInterfaceWrapper) GetPrizes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPrizes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPrizes operation middleware
func (siw *ServerInterfaceWrapper) PostPrizes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPrizes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoles operation middleware
func (siw *ServerInterfaceWrapper) GetRoles(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRoles operation middleware
func (siw *ServerInterfaceWrapper) PostRoles(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRoles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSports operation middleware
func (siw *ServerInterfaceWrapper) GetSports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSports operation middleware
func (siw *ServerInterfaceWrapper) PostSports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSportsId operation middleware
func (siw *ServerInterfaceWrapper) GetSportsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSportsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStages operation middleware
func (siw *ServerInterfaceWrapper) GetStages(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostStages operation middleware
func (siw *ServerInterfaceWrapper) PostStages(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeamAchievements operation middleware
func (siw *ServerInterfaceWrapper) GetTeamAchievements(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeamAchievements(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTeamAchievements operation middleware
func (siw *ServerInterfaceWrapper) PostTeamAchievements(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTeamAchievements(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeams operation middleware
func (siw *ServerInterfaceWrapper) GetTeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTeams operation middleware
func (siw *ServerInterfaceWrapper) PostTeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/competition-levels", wrapper.GetCompetitionLevels)
	m.HandleFunc("POST "+options.BaseURL+"/competition-levels", wrapper.PostCompetitionLevels)
	m.HandleFunc("GET "+options.BaseURL+"/competition-teams", wrapper.GetCompetitionTeams)
	m.HandleFunc("POST "+options.BaseURL+"/competition-teams", wrapper.PostCompetitionTeams)
	m.HandleFunc("GET "+options.BaseURL+"/competitions", wrapper.GetCompetitions)
	m.HandleFunc("POST "+options.BaseURL+"/competitions", wrapper.PostCompetitions)
	m.HandleFunc("GET "+options.BaseURL+"/countries", wrapper.GetCountries)
	m.HandleFunc("POST "+options.BaseURL+"/countries", wrapper.PostCountries)
	m.HandleFunc("GET "+options.BaseURL+"/languages", wrapper.GetLanguages)
	m.HandleFunc("POST "+options.BaseURL+"/languages", wrapper.PostLanguages)
	m.HandleFunc("GET "+options.BaseURL+"/locations", wrapper.GetLocations)
	m.HandleFunc("POST "+options.BaseURL+"/locations", wrapper.PostLocations)
	m.HandleFunc("GET "+options.BaseURL+"/match-participants", wrapper.GetMatchParticipants)
	m.HandleFunc("POST "+options.BaseURL+"/match-participants", wrapper.PostMatchParticipants)
	m.HandleFunc("GET "+options.BaseURL+"/matches", wrapper.GetMatches)
	m.HandleFunc("POST "+options.BaseURL+"/matches", wrapper.PostMatches)
	m.HandleFunc("GET "+options.BaseURL+"/persons", wrapper.GetPersons)
	m.HandleFunc("POST "+options.BaseURL+"/persons", wrapper.PostPersons)
	m.HandleFunc("GET "+options.BaseURL+"/prizes", wrapper.GetPrizes)
	m.HandleFunc("POST "+options.BaseURL+"/prizes", wrapper.PostPrizes)
	m.HandleFunc("GET "+options.BaseURL+"/roles", wrapper.GetRoles)
	m.HandleFunc("POST "+options.BaseURL+"/roles", wrapper.PostRoles)
	m.HandleFunc("GET "+options.BaseURL+"/sports", wrapper.GetSports)
	m.HandleFunc("POST "+options.BaseURL+"/sports", wrapper.PostSports)
	m.HandleFunc("GET "+options.BaseURL+"/sports/{id}", wrapper.GetSportsId)
	m.HandleFunc("GET "+options.BaseURL+"/stages", wrapper.GetStages)
	m.HandleFunc("POST "+options.BaseURL+"/stages", wrapper.PostStages)
	m.HandleFunc("GET "+options.BaseURL+"/team-achievements", wrapper.GetTeamAchievements)
	m.HandleFunc("POST "+options.BaseURL+"/team-achievements", wrapper.PostTeamAchievements)
	m.HandleFunc("GET "+options.BaseURL+"/teams", wrapper.GetTeams)
	m.HandleFunc("POST "+options.BaseURL+"/teams", wrapper.PostTeams)

	return m
}
